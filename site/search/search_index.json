{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"OnChainTraits/","text":"OnChainTraits 0xstabby.eth OnChain Traits Inherit from this abstract to use on-chain metadata Just setTraits, and return getMetadata from tokenURI in implementation Methods _name function _name() external view returns (string) Returns Name Type Description _0 string undefined _symbol function _symbol() external view returns (string) Returns Name Type Description _0 string undefined description function description() external view returns (string) Returns Name Type Description _0 string undefined getImage function getImage(uint256 id) external view returns (string) Get image Can be overridden Parameters Name Type Description id uint256 To get image for Returns Name Type Description _0 string String of base64 encoded svg getMetadata function getMetadata(uint256 id) external view returns (string) Get metadata for id Can be overridden Parameters Name Type Description id uint256 To grab metadata for Returns Name Type Description _0 string String of base64 encoded metadata getTraits function getTraits(uint256 id) external view returns (struct OnChainDataStructs.Trait[]) Get traits for id Can be overridden Parameters Name Type Description id uint256 To grab traits for Returns Name Type Description _0 OnChainDataStructs.Trait[] Array of Traits seed function seed() external view returns (uint256) Returns Name Type Description _0 uint256 undefined traitTypeCount function traitTypeCount() external view returns (uint256) Returns Name Type Description _0 uint256 undefined traitValueCount function traitValueCount() external view returns (uint256) Returns Name Type Description _0 uint256 undefined","title":"OnChainTraits"},{"location":"OnChainTraits/#onchaintraits","text":"0xstabby.eth OnChain Traits Inherit from this abstract to use on-chain metadata Just setTraits, and return getMetadata from tokenURI in implementation","title":"OnChainTraits"},{"location":"OnChainTraits/#methods","text":"","title":"Methods"},{"location":"OnChainTraits/#_name","text":"function _name() external view returns (string)","title":"_name"},{"location":"OnChainTraits/#returns","text":"Name Type Description _0 string undefined","title":"Returns"},{"location":"OnChainTraits/#_symbol","text":"function _symbol() external view returns (string)","title":"_symbol"},{"location":"OnChainTraits/#returns_1","text":"Name Type Description _0 string undefined","title":"Returns"},{"location":"OnChainTraits/#description","text":"function description() external view returns (string)","title":"description"},{"location":"OnChainTraits/#returns_2","text":"Name Type Description _0 string undefined","title":"Returns"},{"location":"OnChainTraits/#getimage","text":"function getImage(uint256 id) external view returns (string) Get image Can be overridden","title":"getImage"},{"location":"OnChainTraits/#parameters","text":"Name Type Description id uint256 To get image for","title":"Parameters"},{"location":"OnChainTraits/#returns_3","text":"Name Type Description _0 string String of base64 encoded svg","title":"Returns"},{"location":"OnChainTraits/#getmetadata","text":"function getMetadata(uint256 id) external view returns (string) Get metadata for id Can be overridden","title":"getMetadata"},{"location":"OnChainTraits/#parameters_1","text":"Name Type Description id uint256 To grab metadata for","title":"Parameters"},{"location":"OnChainTraits/#returns_4","text":"Name Type Description _0 string String of base64 encoded metadata","title":"Returns"},{"location":"OnChainTraits/#gettraits","text":"function getTraits(uint256 id) external view returns (struct OnChainDataStructs.Trait[]) Get traits for id Can be overridden","title":"getTraits"},{"location":"OnChainTraits/#parameters_2","text":"Name Type Description id uint256 To grab traits for","title":"Parameters"},{"location":"OnChainTraits/#returns_5","text":"Name Type Description _0 OnChainDataStructs.Trait[] Array of Traits","title":"Returns"},{"location":"OnChainTraits/#seed","text":"function seed() external view returns (uint256)","title":"seed"},{"location":"OnChainTraits/#returns_6","text":"Name Type Description _0 uint256 undefined","title":"Returns"},{"location":"OnChainTraits/#traittypecount","text":"function traitTypeCount() external view returns (uint256)","title":"traitTypeCount"},{"location":"OnChainTraits/#returns_7","text":"Name Type Description _0 uint256 undefined","title":"Returns"},{"location":"OnChainTraits/#traitvaluecount","text":"function traitValueCount() external view returns (uint256)","title":"traitValueCount"},{"location":"OnChainTraits/#returns_8","text":"Name Type Description _0 uint256 undefined","title":"Returns"},{"location":"%40openzeppelin/contracts/access/Ownable/","text":"Ownable Overview License: MIT abstract contract Ownable is Context Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier onlyOwner , which can be applied to your functions to restrict their use to the owner. Events info OwnershipTransferred event OwnershipTransferred(address indexed previousOwner, address indexed newOwner) Errors info OwnableUnauthorizedAccount error OwnableUnauthorizedAccount(address account) The caller account is not authorized to perform an operation. OwnableInvalidOwner error OwnableInvalidOwner(address owner) The owner is not a valid owner account. (eg. address(0) ) Modifiers info onlyOwner modifier onlyOwner() Throws if called by any account other than the owner. Functions info owner (0x8da5cb5b) function owner() public view virtual returns (address) Returns the address of the current owner. renounceOwnership (0x715018a6) function renounceOwnership() public virtual onlyOwner Leaves the contract without owner. It will not be possible to call onlyOwner functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner. transferOwnership (0xf2fde38b) function transferOwnership(address newOwner) public virtual onlyOwner Transfers ownership of the contract to a new account ( newOwner ). Can only be called by the current owner.","title":"Ownable"},{"location":"%40openzeppelin/contracts/access/Ownable/#ownable","text":"","title":"Ownable"},{"location":"%40openzeppelin/contracts/access/Ownable/#overview","text":"","title":"Overview"},{"location":"%40openzeppelin/contracts/access/Ownable/#license-mit","text":"","title":"License: MIT"},{"location":"%40openzeppelin/contracts/access/Ownable/#_1","text":"abstract contract Ownable is Context Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier onlyOwner , which can be applied to your functions to restrict their use to the owner.","title":""},{"location":"%40openzeppelin/contracts/access/Ownable/#events-info","text":"","title":"Events info"},{"location":"%40openzeppelin/contracts/access/Ownable/#ownershiptransferred","text":"event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)","title":"OwnershipTransferred"},{"location":"%40openzeppelin/contracts/access/Ownable/#errors-info","text":"","title":"Errors info"},{"location":"%40openzeppelin/contracts/access/Ownable/#ownableunauthorizedaccount","text":"error OwnableUnauthorizedAccount(address account) The caller account is not authorized to perform an operation.","title":"OwnableUnauthorizedAccount"},{"location":"%40openzeppelin/contracts/access/Ownable/#ownableinvalidowner","text":"error OwnableInvalidOwner(address owner) The owner is not a valid owner account. (eg. address(0) )","title":"OwnableInvalidOwner"},{"location":"%40openzeppelin/contracts/access/Ownable/#modifiers-info","text":"","title":"Modifiers info"},{"location":"%40openzeppelin/contracts/access/Ownable/#onlyowner","text":"modifier onlyOwner() Throws if called by any account other than the owner.","title":"onlyOwner"},{"location":"%40openzeppelin/contracts/access/Ownable/#functions-info","text":"","title":"Functions info"},{"location":"%40openzeppelin/contracts/access/Ownable/#owner-0x8da5cb5b","text":"function owner() public view virtual returns (address) Returns the address of the current owner.","title":"owner (0x8da5cb5b)"},{"location":"%40openzeppelin/contracts/access/Ownable/#renounceownership-0x715018a6","text":"function renounceOwnership() public virtual onlyOwner Leaves the contract without owner. It will not be possible to call onlyOwner functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.","title":"renounceOwnership (0x715018a6)"},{"location":"%40openzeppelin/contracts/access/Ownable/#transferownership-0xf2fde38b","text":"function transferOwnership(address newOwner) public virtual onlyOwner Transfers ownership of the contract to a new account ( newOwner ). Can only be called by the current owner.","title":"transferOwnership (0xf2fde38b)"},{"location":"%40openzeppelin/contracts/interfaces/IERC1155Errors/","text":"IERC1155Errors Overview License: MIT interface IERC1155Errors Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens. Errors info ERC1155InsufficientBalance error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId) Indicates an error related to the current balance of a sender . Used in transfers. Parameters: Name Type Description sender address Address whose tokens are being transferred. balance uint256 Current balance for the interacting account. needed uint256 Minimum amount required to perform a transfer. tokenId uint256 Identifier number of a token. ERC1155InvalidSender error ERC1155InvalidSender(address sender) Indicates a failure with the token sender . Used in transfers. Parameters: Name Type Description sender address Address whose tokens are being transferred. ERC1155InvalidReceiver error ERC1155InvalidReceiver(address receiver) Indicates a failure with the token receiver . Used in transfers. Parameters: Name Type Description receiver address Address to which tokens are being transferred. ERC1155MissingApprovalForAll error ERC1155MissingApprovalForAll(address operator, address owner) Indicates a failure with the operator \u2019s approval. Used in transfers. Parameters: Name Type Description operator address Address that may be allowed to operate on tokens without being their owner. owner address Address of the current owner of a token. ERC1155InvalidApprover error ERC1155InvalidApprover(address approver) Indicates a failure with the approver of a token to be approved. Used in approvals. Parameters: Name Type Description approver address Address initiating an approval operation. ERC1155InvalidOperator error ERC1155InvalidOperator(address operator) Indicates a failure with the operator to be approved. Used in approvals. Parameters: Name Type Description operator address Address that may be allowed to operate on tokens without being their owner. ERC1155InvalidArrayLength error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength) Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers. Parameters: Name Type Description idsLength uint256 Length of the array of token identifiers valuesLength uint256 Length of the array of token amounts","title":"IERC1155Errors"},{"location":"%40openzeppelin/contracts/interfaces/IERC1155Errors/#ierc1155errors","text":"","title":"IERC1155Errors"},{"location":"%40openzeppelin/contracts/interfaces/IERC1155Errors/#overview","text":"","title":"Overview"},{"location":"%40openzeppelin/contracts/interfaces/IERC1155Errors/#license-mit","text":"","title":"License: MIT"},{"location":"%40openzeppelin/contracts/interfaces/IERC1155Errors/#_1","text":"interface IERC1155Errors Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.","title":""},{"location":"%40openzeppelin/contracts/interfaces/IERC1155Errors/#errors-info","text":"","title":"Errors info"},{"location":"%40openzeppelin/contracts/interfaces/IERC1155Errors/#erc1155insufficientbalance","text":"error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId) Indicates an error related to the current balance of a sender . Used in transfers. Parameters: Name Type Description sender address Address whose tokens are being transferred. balance uint256 Current balance for the interacting account. needed uint256 Minimum amount required to perform a transfer. tokenId uint256 Identifier number of a token.","title":"ERC1155InsufficientBalance"},{"location":"%40openzeppelin/contracts/interfaces/IERC1155Errors/#erc1155invalidsender","text":"error ERC1155InvalidSender(address sender) Indicates a failure with the token sender . Used in transfers. Parameters: Name Type Description sender address Address whose tokens are being transferred.","title":"ERC1155InvalidSender"},{"location":"%40openzeppelin/contracts/interfaces/IERC1155Errors/#erc1155invalidreceiver","text":"error ERC1155InvalidReceiver(address receiver) Indicates a failure with the token receiver . Used in transfers. Parameters: Name Type Description receiver address Address to which tokens are being transferred.","title":"ERC1155InvalidReceiver"},{"location":"%40openzeppelin/contracts/interfaces/IERC1155Errors/#erc1155missingapprovalforall","text":"error ERC1155MissingApprovalForAll(address operator, address owner) Indicates a failure with the operator \u2019s approval. Used in transfers. Parameters: Name Type Description operator address Address that may be allowed to operate on tokens without being their owner. owner address Address of the current owner of a token.","title":"ERC1155MissingApprovalForAll"},{"location":"%40openzeppelin/contracts/interfaces/IERC1155Errors/#erc1155invalidapprover","text":"error ERC1155InvalidApprover(address approver) Indicates a failure with the approver of a token to be approved. Used in approvals. Parameters: Name Type Description approver address Address initiating an approval operation.","title":"ERC1155InvalidApprover"},{"location":"%40openzeppelin/contracts/interfaces/IERC1155Errors/#erc1155invalidoperator","text":"error ERC1155InvalidOperator(address operator) Indicates a failure with the operator to be approved. Used in approvals. Parameters: Name Type Description operator address Address that may be allowed to operate on tokens without being their owner.","title":"ERC1155InvalidOperator"},{"location":"%40openzeppelin/contracts/interfaces/IERC1155Errors/#erc1155invalidarraylength","text":"error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength) Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers. Parameters: Name Type Description idsLength uint256 Length of the array of token identifiers valuesLength uint256 Length of the array of token amounts","title":"ERC1155InvalidArrayLength"},{"location":"%40openzeppelin/contracts/interfaces/IERC20Errors/","text":"IERC20Errors Overview License: MIT interface IERC20Errors Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens. Errors info ERC20InsufficientBalance error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed) Indicates an error related to the current balance of a sender . Used in transfers. Parameters: Name Type Description sender address Address whose tokens are being transferred. balance uint256 Current balance for the interacting account. needed uint256 Minimum amount required to perform a transfer. ERC20InvalidSender error ERC20InvalidSender(address sender) Indicates a failure with the token sender . Used in transfers. Parameters: Name Type Description sender address Address whose tokens are being transferred. ERC20InvalidReceiver error ERC20InvalidReceiver(address receiver) Indicates a failure with the token receiver . Used in transfers. Parameters: Name Type Description receiver address Address to which tokens are being transferred. ERC20InsufficientAllowance error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed) Indicates a failure with the spender \u2019s allowance . Used in transfers. Parameters: Name Type Description spender address Address that may be allowed to operate on tokens without being their owner. allowance uint256 Amount of tokens a spender is allowed to operate with. needed uint256 Minimum amount required to perform a transfer. ERC20InvalidApprover error ERC20InvalidApprover(address approver) Indicates a failure with the approver of a token to be approved. Used in approvals. Parameters: Name Type Description approver address Address initiating an approval operation. ERC20InvalidSpender error ERC20InvalidSpender(address spender) Indicates a failure with the spender to be approved. Used in approvals. Parameters: Name Type Description spender address Address that may be allowed to operate on tokens without being their owner.","title":"IERC20Errors"},{"location":"%40openzeppelin/contracts/interfaces/IERC20Errors/#ierc20errors","text":"","title":"IERC20Errors"},{"location":"%40openzeppelin/contracts/interfaces/IERC20Errors/#overview","text":"","title":"Overview"},{"location":"%40openzeppelin/contracts/interfaces/IERC20Errors/#license-mit","text":"","title":"License: MIT"},{"location":"%40openzeppelin/contracts/interfaces/IERC20Errors/#_1","text":"interface IERC20Errors Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.","title":""},{"location":"%40openzeppelin/contracts/interfaces/IERC20Errors/#errors-info","text":"","title":"Errors info"},{"location":"%40openzeppelin/contracts/interfaces/IERC20Errors/#erc20insufficientbalance","text":"error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed) Indicates an error related to the current balance of a sender . Used in transfers. Parameters: Name Type Description sender address Address whose tokens are being transferred. balance uint256 Current balance for the interacting account. needed uint256 Minimum amount required to perform a transfer.","title":"ERC20InsufficientBalance"},{"location":"%40openzeppelin/contracts/interfaces/IERC20Errors/#erc20invalidsender","text":"error ERC20InvalidSender(address sender) Indicates a failure with the token sender . Used in transfers. Parameters: Name Type Description sender address Address whose tokens are being transferred.","title":"ERC20InvalidSender"},{"location":"%40openzeppelin/contracts/interfaces/IERC20Errors/#erc20invalidreceiver","text":"error ERC20InvalidReceiver(address receiver) Indicates a failure with the token receiver . Used in transfers. Parameters: Name Type Description receiver address Address to which tokens are being transferred.","title":"ERC20InvalidReceiver"},{"location":"%40openzeppelin/contracts/interfaces/IERC20Errors/#erc20insufficientallowance","text":"error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed) Indicates a failure with the spender \u2019s allowance . Used in transfers. Parameters: Name Type Description spender address Address that may be allowed to operate on tokens without being their owner. allowance uint256 Amount of tokens a spender is allowed to operate with. needed uint256 Minimum amount required to perform a transfer.","title":"ERC20InsufficientAllowance"},{"location":"%40openzeppelin/contracts/interfaces/IERC20Errors/#erc20invalidapprover","text":"error ERC20InvalidApprover(address approver) Indicates a failure with the approver of a token to be approved. Used in approvals. Parameters: Name Type Description approver address Address initiating an approval operation.","title":"ERC20InvalidApprover"},{"location":"%40openzeppelin/contracts/interfaces/IERC20Errors/#erc20invalidspender","text":"error ERC20InvalidSpender(address spender) Indicates a failure with the spender to be approved. Used in approvals. Parameters: Name Type Description spender address Address that may be allowed to operate on tokens without being their owner.","title":"ERC20InvalidSpender"},{"location":"%40openzeppelin/contracts/interfaces/IERC721Errors/","text":"IERC721Errors Overview License: MIT interface IERC721Errors Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens. Errors info ERC721InvalidOwner error ERC721InvalidOwner(address owner) Indicates that an address can't be an owner. For example, address(0) is a forbidden owner in EIP-20. Used in balance queries. Parameters: Name Type Description owner address Address of the current owner of a token. ERC721NonexistentToken error ERC721NonexistentToken(uint256 tokenId) Indicates a tokenId whose owner is the zero address. Parameters: Name Type Description tokenId uint256 Identifier number of a token. ERC721IncorrectOwner error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner) Indicates an error related to the ownership over a particular token. Used in transfers. Parameters: Name Type Description sender address Address whose tokens are being transferred. tokenId uint256 Identifier number of a token. owner address Address of the current owner of a token. ERC721InvalidSender error ERC721InvalidSender(address sender) Indicates a failure with the token sender . Used in transfers. Parameters: Name Type Description sender address Address whose tokens are being transferred. ERC721InvalidReceiver error ERC721InvalidReceiver(address receiver) Indicates a failure with the token receiver . Used in transfers. Parameters: Name Type Description receiver address Address to which tokens are being transferred. ERC721InsufficientApproval error ERC721InsufficientApproval(address operator, uint256 tokenId) Indicates a failure with the operator \u2019s approval. Used in transfers. Parameters: Name Type Description operator address Address that may be allowed to operate on tokens without being their owner. tokenId uint256 Identifier number of a token. ERC721InvalidApprover error ERC721InvalidApprover(address approver) Indicates a failure with the approver of a token to be approved. Used in approvals. Parameters: Name Type Description approver address Address initiating an approval operation. ERC721InvalidOperator error ERC721InvalidOperator(address operator) Indicates a failure with the operator to be approved. Used in approvals. Parameters: Name Type Description operator address Address that may be allowed to operate on tokens without being their owner.","title":"IERC721Errors"},{"location":"%40openzeppelin/contracts/interfaces/IERC721Errors/#ierc721errors","text":"","title":"IERC721Errors"},{"location":"%40openzeppelin/contracts/interfaces/IERC721Errors/#overview","text":"","title":"Overview"},{"location":"%40openzeppelin/contracts/interfaces/IERC721Errors/#license-mit","text":"","title":"License: MIT"},{"location":"%40openzeppelin/contracts/interfaces/IERC721Errors/#_1","text":"interface IERC721Errors Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.","title":""},{"location":"%40openzeppelin/contracts/interfaces/IERC721Errors/#errors-info","text":"","title":"Errors info"},{"location":"%40openzeppelin/contracts/interfaces/IERC721Errors/#erc721invalidowner","text":"error ERC721InvalidOwner(address owner) Indicates that an address can't be an owner. For example, address(0) is a forbidden owner in EIP-20. Used in balance queries. Parameters: Name Type Description owner address Address of the current owner of a token.","title":"ERC721InvalidOwner"},{"location":"%40openzeppelin/contracts/interfaces/IERC721Errors/#erc721nonexistenttoken","text":"error ERC721NonexistentToken(uint256 tokenId) Indicates a tokenId whose owner is the zero address. Parameters: Name Type Description tokenId uint256 Identifier number of a token.","title":"ERC721NonexistentToken"},{"location":"%40openzeppelin/contracts/interfaces/IERC721Errors/#erc721incorrectowner","text":"error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner) Indicates an error related to the ownership over a particular token. Used in transfers. Parameters: Name Type Description sender address Address whose tokens are being transferred. tokenId uint256 Identifier number of a token. owner address Address of the current owner of a token.","title":"ERC721IncorrectOwner"},{"location":"%40openzeppelin/contracts/interfaces/IERC721Errors/#erc721invalidsender","text":"error ERC721InvalidSender(address sender) Indicates a failure with the token sender . Used in transfers. Parameters: Name Type Description sender address Address whose tokens are being transferred.","title":"ERC721InvalidSender"},{"location":"%40openzeppelin/contracts/interfaces/IERC721Errors/#erc721invalidreceiver","text":"error ERC721InvalidReceiver(address receiver) Indicates a failure with the token receiver . Used in transfers. Parameters: Name Type Description receiver address Address to which tokens are being transferred.","title":"ERC721InvalidReceiver"},{"location":"%40openzeppelin/contracts/interfaces/IERC721Errors/#erc721insufficientapproval","text":"error ERC721InsufficientApproval(address operator, uint256 tokenId) Indicates a failure with the operator \u2019s approval. Used in transfers. Parameters: Name Type Description operator address Address that may be allowed to operate on tokens without being their owner. tokenId uint256 Identifier number of a token.","title":"ERC721InsufficientApproval"},{"location":"%40openzeppelin/contracts/interfaces/IERC721Errors/#erc721invalidapprover","text":"error ERC721InvalidApprover(address approver) Indicates a failure with the approver of a token to be approved. Used in approvals. Parameters: Name Type Description approver address Address initiating an approval operation.","title":"ERC721InvalidApprover"},{"location":"%40openzeppelin/contracts/interfaces/IERC721Errors/#erc721invalidoperator","text":"error ERC721InvalidOperator(address operator) Indicates a failure with the operator to be approved. Used in approvals. Parameters: Name Type Description operator address Address that may be allowed to operate on tokens without being their owner.","title":"ERC721InvalidOperator"},{"location":"%40openzeppelin/contracts/token/ERC721/ERC721/","text":"ERC721 Overview License: MIT abstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}. Functions info supportsInterface (0x01ffc9a7) function supportsInterface( bytes4 interfaceId ) public view virtual override returns (bool) See {IERC165-supportsInterface}. balanceOf (0x70a08231) function balanceOf(address owner) public view virtual returns (uint256) See {IERC721-balanceOf}. ownerOf (0x6352211e) function ownerOf(uint256 tokenId) public view virtual returns (address) See {IERC721-ownerOf}. name (0x06fdde03) function name() public view virtual returns (string memory) See {IERC721Metadata-name}. symbol (0x95d89b41) function symbol() public view virtual returns (string memory) See {IERC721Metadata-symbol}. tokenURI (0xc87b56dd) function tokenURI(uint256 tokenId) public view virtual returns (string memory) See {IERC721Metadata-tokenURI}. approve (0x095ea7b3) function approve(address to, uint256 tokenId) public virtual See {IERC721-approve}. getApproved (0x081812fc) function getApproved(uint256 tokenId) public view virtual returns (address) See {IERC721-getApproved}. setApprovalForAll (0xa22cb465) function setApprovalForAll(address operator, bool approved) public virtual See {IERC721-setApprovalForAll}. isApprovedForAll (0xe985e9c5) function isApprovedForAll( address owner, address operator ) public view virtual returns (bool) See {IERC721-isApprovedForAll}. transferFrom (0x23b872dd) function transferFrom(address from, address to, uint256 tokenId) public virtual See {IERC721-transferFrom}. safeTransferFrom (0x42842e0e) function safeTransferFrom(address from, address to, uint256 tokenId) public See {IERC721-safeTransferFrom}. safeTransferFrom (0xb88d4fde) function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory data ) public virtual See {IERC721-safeTransferFrom}.","title":"ERC721"},{"location":"%40openzeppelin/contracts/token/ERC721/ERC721/#erc721","text":"","title":"ERC721"},{"location":"%40openzeppelin/contracts/token/ERC721/ERC721/#overview","text":"","title":"Overview"},{"location":"%40openzeppelin/contracts/token/ERC721/ERC721/#license-mit","text":"","title":"License: MIT"},{"location":"%40openzeppelin/contracts/token/ERC721/ERC721/#_1","text":"abstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.","title":""},{"location":"%40openzeppelin/contracts/token/ERC721/ERC721/#functions-info","text":"","title":"Functions info"},{"location":"%40openzeppelin/contracts/token/ERC721/ERC721/#supportsinterface-0x01ffc9a7","text":"function supportsInterface( bytes4 interfaceId ) public view virtual override returns (bool) See {IERC165-supportsInterface}.","title":"supportsInterface (0x01ffc9a7)"},{"location":"%40openzeppelin/contracts/token/ERC721/ERC721/#balanceof-0x70a08231","text":"function balanceOf(address owner) public view virtual returns (uint256) See {IERC721-balanceOf}.","title":"balanceOf (0x70a08231)"},{"location":"%40openzeppelin/contracts/token/ERC721/ERC721/#ownerof-0x6352211e","text":"function ownerOf(uint256 tokenId) public view virtual returns (address) See {IERC721-ownerOf}.","title":"ownerOf (0x6352211e)"},{"location":"%40openzeppelin/contracts/token/ERC721/ERC721/#name-0x06fdde03","text":"function name() public view virtual returns (string memory) See {IERC721Metadata-name}.","title":"name (0x06fdde03)"},{"location":"%40openzeppelin/contracts/token/ERC721/ERC721/#symbol-0x95d89b41","text":"function symbol() public view virtual returns (string memory) See {IERC721Metadata-symbol}.","title":"symbol (0x95d89b41)"},{"location":"%40openzeppelin/contracts/token/ERC721/ERC721/#tokenuri-0xc87b56dd","text":"function tokenURI(uint256 tokenId) public view virtual returns (string memory) See {IERC721Metadata-tokenURI}.","title":"tokenURI (0xc87b56dd)"},{"location":"%40openzeppelin/contracts/token/ERC721/ERC721/#approve-0x095ea7b3","text":"function approve(address to, uint256 tokenId) public virtual See {IERC721-approve}.","title":"approve (0x095ea7b3)"},{"location":"%40openzeppelin/contracts/token/ERC721/ERC721/#getapproved-0x081812fc","text":"function getApproved(uint256 tokenId) public view virtual returns (address) See {IERC721-getApproved}.","title":"getApproved (0x081812fc)"},{"location":"%40openzeppelin/contracts/token/ERC721/ERC721/#setapprovalforall-0xa22cb465","text":"function setApprovalForAll(address operator, bool approved) public virtual See {IERC721-setApprovalForAll}.","title":"setApprovalForAll (0xa22cb465)"},{"location":"%40openzeppelin/contracts/token/ERC721/ERC721/#isapprovedforall-0xe985e9c5","text":"function isApprovedForAll( address owner, address operator ) public view virtual returns (bool) See {IERC721-isApprovedForAll}.","title":"isApprovedForAll (0xe985e9c5)"},{"location":"%40openzeppelin/contracts/token/ERC721/ERC721/#transferfrom-0x23b872dd","text":"function transferFrom(address from, address to, uint256 tokenId) public virtual See {IERC721-transferFrom}.","title":"transferFrom (0x23b872dd)"},{"location":"%40openzeppelin/contracts/token/ERC721/ERC721/#safetransferfrom-0x42842e0e","text":"function safeTransferFrom(address from, address to, uint256 tokenId) public See {IERC721-safeTransferFrom}.","title":"safeTransferFrom (0x42842e0e)"},{"location":"%40openzeppelin/contracts/token/ERC721/ERC721/#safetransferfrom-0xb88d4fde","text":"function safeTransferFrom( address from, address to, uint256 tokenId, bytes memory data ) public virtual See {IERC721-safeTransferFrom}.","title":"safeTransferFrom (0xb88d4fde)"},{"location":"%40openzeppelin/contracts/token/ERC721/IERC721/","text":"IERC721 Overview License: MIT interface IERC721 is IERC165 Required interface of an ERC721 compliant contract. Events info Transfer event Transfer(address indexed from, address indexed to, uint256 indexed tokenId) Emitted when tokenId token is transferred from from to to . Approval event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId) Emitted when owner enables approved to manage the tokenId token. ApprovalForAll event ApprovalForAll(address indexed owner, address indexed operator, bool approved) Emitted when owner enables or disables ( approved ) operator to manage all of its assets. Functions info balanceOf (0x70a08231) function balanceOf(address owner) external view returns (uint256 balance) Returns the number of tokens in owner 's account. ownerOf (0x6352211e) function ownerOf(uint256 tokenId) external view returns (address owner) Returns the owner of the tokenId token. Requirements: tokenId must exist. safeTransferFrom (0xb88d4fde) function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external Safely transfers tokenId token from from to to . Requirements: from cannot be the zero address. to cannot be the zero address. tokenId token must exist and be owned by from . If the caller is not from , it must be approved to move this token by either {approve} or {setApprovalForAll}. If to refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event. safeTransferFrom (0x42842e0e) function safeTransferFrom(address from, address to, uint256 tokenId) external Safely transfers tokenId token from from to to , checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: from cannot be the zero address. to cannot be the zero address. tokenId token must exist and be owned by from . If the caller is not from , it must have been allowed to move this token by either {approve} or {setApprovalForAll}. If to refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event. transferFrom (0x23b872dd) function transferFrom(address from, address to, uint256 tokenId) external Transfers tokenId token from from to to . WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: from cannot be the zero address. to cannot be the zero address. tokenId token must be owned by from . If the caller is not from , it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event. approve (0x095ea7b3) function approve(address to, uint256 tokenId) external Gives permission to to to transfer tokenId token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: The caller must own the token or be an approved operator. tokenId must exist. Emits an {Approval} event. setApprovalForAll (0xa22cb465) function setApprovalForAll(address operator, bool approved) external Approve or remove operator as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: The operator cannot be the address zero. Emits an {ApprovalForAll} event. getApproved (0x081812fc) function getApproved(uint256 tokenId) external view returns (address operator) Returns the account approved for tokenId token. Requirements: tokenId must exist. isApprovedForAll (0xe985e9c5) function isApprovedForAll( address owner, address operator ) external view returns (bool) Returns if the operator is allowed to manage all of the assets of owner . See {setApprovalForAll}","title":"IERC721"},{"location":"%40openzeppelin/contracts/token/ERC721/IERC721/#ierc721","text":"","title":"IERC721"},{"location":"%40openzeppelin/contracts/token/ERC721/IERC721/#overview","text":"","title":"Overview"},{"location":"%40openzeppelin/contracts/token/ERC721/IERC721/#license-mit","text":"","title":"License: MIT"},{"location":"%40openzeppelin/contracts/token/ERC721/IERC721/#_1","text":"interface IERC721 is IERC165 Required interface of an ERC721 compliant contract.","title":""},{"location":"%40openzeppelin/contracts/token/ERC721/IERC721/#events-info","text":"","title":"Events info"},{"location":"%40openzeppelin/contracts/token/ERC721/IERC721/#transfer","text":"event Transfer(address indexed from, address indexed to, uint256 indexed tokenId) Emitted when tokenId token is transferred from from to to .","title":"Transfer"},{"location":"%40openzeppelin/contracts/token/ERC721/IERC721/#approval","text":"event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId) Emitted when owner enables approved to manage the tokenId token.","title":"Approval"},{"location":"%40openzeppelin/contracts/token/ERC721/IERC721/#approvalforall","text":"event ApprovalForAll(address indexed owner, address indexed operator, bool approved) Emitted when owner enables or disables ( approved ) operator to manage all of its assets.","title":"ApprovalForAll"},{"location":"%40openzeppelin/contracts/token/ERC721/IERC721/#functions-info","text":"","title":"Functions info"},{"location":"%40openzeppelin/contracts/token/ERC721/IERC721/#balanceof-0x70a08231","text":"function balanceOf(address owner) external view returns (uint256 balance) Returns the number of tokens in owner 's account.","title":"balanceOf (0x70a08231)"},{"location":"%40openzeppelin/contracts/token/ERC721/IERC721/#ownerof-0x6352211e","text":"function ownerOf(uint256 tokenId) external view returns (address owner) Returns the owner of the tokenId token. Requirements: tokenId must exist.","title":"ownerOf (0x6352211e)"},{"location":"%40openzeppelin/contracts/token/ERC721/IERC721/#safetransferfrom-0xb88d4fde","text":"function safeTransferFrom( address from, address to, uint256 tokenId, bytes calldata data ) external Safely transfers tokenId token from from to to . Requirements: from cannot be the zero address. to cannot be the zero address. tokenId token must exist and be owned by from . If the caller is not from , it must be approved to move this token by either {approve} or {setApprovalForAll}. If to refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.","title":"safeTransferFrom (0xb88d4fde)"},{"location":"%40openzeppelin/contracts/token/ERC721/IERC721/#safetransferfrom-0x42842e0e","text":"function safeTransferFrom(address from, address to, uint256 tokenId) external Safely transfers tokenId token from from to to , checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: from cannot be the zero address. to cannot be the zero address. tokenId token must exist and be owned by from . If the caller is not from , it must have been allowed to move this token by either {approve} or {setApprovalForAll}. If to refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.","title":"safeTransferFrom (0x42842e0e)"},{"location":"%40openzeppelin/contracts/token/ERC721/IERC721/#transferfrom-0x23b872dd","text":"function transferFrom(address from, address to, uint256 tokenId) external Transfers tokenId token from from to to . WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: from cannot be the zero address. to cannot be the zero address. tokenId token must be owned by from . If the caller is not from , it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.","title":"transferFrom (0x23b872dd)"},{"location":"%40openzeppelin/contracts/token/ERC721/IERC721/#approve-0x095ea7b3","text":"function approve(address to, uint256 tokenId) external Gives permission to to to transfer tokenId token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: The caller must own the token or be an approved operator. tokenId must exist. Emits an {Approval} event.","title":"approve (0x095ea7b3)"},{"location":"%40openzeppelin/contracts/token/ERC721/IERC721/#setapprovalforall-0xa22cb465","text":"function setApprovalForAll(address operator, bool approved) external Approve or remove operator as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: The operator cannot be the address zero. Emits an {ApprovalForAll} event.","title":"setApprovalForAll (0xa22cb465)"},{"location":"%40openzeppelin/contracts/token/ERC721/IERC721/#getapproved-0x081812fc","text":"function getApproved(uint256 tokenId) external view returns (address operator) Returns the account approved for tokenId token. Requirements: tokenId must exist.","title":"getApproved (0x081812fc)"},{"location":"%40openzeppelin/contracts/token/ERC721/IERC721/#isapprovedforall-0xe985e9c5","text":"function isApprovedForAll( address owner, address operator ) external view returns (bool) Returns if the operator is allowed to manage all of the assets of owner . See {setApprovalForAll}","title":"isApprovedForAll (0xe985e9c5)"},{"location":"%40openzeppelin/contracts/token/ERC721/IERC721Receiver/","text":"IERC721Receiver Overview License: MIT interface IERC721Receiver Interface for any contract that wants to support safeTransfers from ERC721 asset contracts. Functions info onERC721Received (0x150b7a02) function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4) Whenever an {IERC721} tokenId token is transferred to this contract via {IERC721-safeTransferFrom} by operator from from , this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with IERC721Receiver.onERC721Received.selector .","title":"IERC721Receiver"},{"location":"%40openzeppelin/contracts/token/ERC721/IERC721Receiver/#ierc721receiver","text":"","title":"IERC721Receiver"},{"location":"%40openzeppelin/contracts/token/ERC721/IERC721Receiver/#overview","text":"","title":"Overview"},{"location":"%40openzeppelin/contracts/token/ERC721/IERC721Receiver/#license-mit","text":"","title":"License: MIT"},{"location":"%40openzeppelin/contracts/token/ERC721/IERC721Receiver/#_1","text":"interface IERC721Receiver Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","title":""},{"location":"%40openzeppelin/contracts/token/ERC721/IERC721Receiver/#functions-info","text":"","title":"Functions info"},{"location":"%40openzeppelin/contracts/token/ERC721/IERC721Receiver/#onerc721received-0x150b7a02","text":"function onERC721Received( address operator, address from, uint256 tokenId, bytes calldata data ) external returns (bytes4) Whenever an {IERC721} tokenId token is transferred to this contract via {IERC721-safeTransferFrom} by operator from from , this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with IERC721Receiver.onERC721Received.selector .","title":"onERC721Received (0x150b7a02)"},{"location":"%40openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata/","text":"IERC721Metadata Overview License: MIT interface IERC721Metadata is IERC721 See https://eips.ethereum.org/EIPS/eip-721 Functions info name (0x06fdde03) function name() external view returns (string memory) Returns the token collection name. symbol (0x95d89b41) function symbol() external view returns (string memory) Returns the token collection symbol. tokenURI (0xc87b56dd) function tokenURI(uint256 tokenId) external view returns (string memory) Returns the Uniform Resource Identifier (URI) for tokenId token.","title":"IERC721Metadata"},{"location":"%40openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata/#ierc721metadata","text":"","title":"IERC721Metadata"},{"location":"%40openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata/#overview","text":"","title":"Overview"},{"location":"%40openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata/#license-mit","text":"","title":"License: MIT"},{"location":"%40openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata/#_1","text":"interface IERC721Metadata is IERC721 See https://eips.ethereum.org/EIPS/eip-721","title":""},{"location":"%40openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata/#functions-info","text":"","title":"Functions info"},{"location":"%40openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata/#name-0x06fdde03","text":"function name() external view returns (string memory) Returns the token collection name.","title":"name (0x06fdde03)"},{"location":"%40openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata/#symbol-0x95d89b41","text":"function symbol() external view returns (string memory) Returns the token collection symbol.","title":"symbol (0x95d89b41)"},{"location":"%40openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata/#tokenuri-0xc87b56dd","text":"function tokenURI(uint256 tokenId) external view returns (string memory) Returns the Uniform Resource Identifier (URI) for tokenId token.","title":"tokenURI (0xc87b56dd)"},{"location":"%40openzeppelin/contracts/utils/Context/","text":"Context Overview License: MIT abstract contract Context Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","title":"Context"},{"location":"%40openzeppelin/contracts/utils/Context/#context","text":"","title":"Context"},{"location":"%40openzeppelin/contracts/utils/Context/#overview","text":"","title":"Overview"},{"location":"%40openzeppelin/contracts/utils/Context/#license-mit","text":"","title":"License: MIT"},{"location":"%40openzeppelin/contracts/utils/Context/#_1","text":"abstract contract Context Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","title":""},{"location":"%40openzeppelin/contracts/utils/Strings/","text":"Strings Overview License: MIT library Strings String operations. Errors info StringsInsufficientHexLength error StringsInsufficientHexLength(uint256 value, uint256 length) The value string doesn't fit in the specified length . Functions info toString function toString(uint256 value) internal pure returns (string memory) Converts a uint256 to its ASCII string decimal representation. toStringSigned function toStringSigned(int256 value) internal pure returns (string memory) Converts a int256 to its ASCII string decimal representation. toHexString function toHexString(uint256 value) internal pure returns (string memory) Converts a uint256 to its ASCII string hexadecimal representation. toHexString function toHexString( uint256 value, uint256 length ) internal pure returns (string memory) Converts a uint256 to its ASCII string hexadecimal representation with fixed length. toHexString function toHexString(address addr) internal pure returns (string memory) Converts an address with fixed length of 20 bytes to its not checksummed ASCII string hexadecimal representation. equal function equal(string memory a, string memory b) internal pure returns (bool) Returns true if the two strings are equal.","title":"Strings"},{"location":"%40openzeppelin/contracts/utils/Strings/#strings","text":"","title":"Strings"},{"location":"%40openzeppelin/contracts/utils/Strings/#overview","text":"","title":"Overview"},{"location":"%40openzeppelin/contracts/utils/Strings/#license-mit","text":"","title":"License: MIT"},{"location":"%40openzeppelin/contracts/utils/Strings/#_1","text":"library Strings String operations.","title":""},{"location":"%40openzeppelin/contracts/utils/Strings/#errors-info","text":"","title":"Errors info"},{"location":"%40openzeppelin/contracts/utils/Strings/#stringsinsufficienthexlength","text":"error StringsInsufficientHexLength(uint256 value, uint256 length) The value string doesn't fit in the specified length .","title":"StringsInsufficientHexLength"},{"location":"%40openzeppelin/contracts/utils/Strings/#functions-info","text":"","title":"Functions info"},{"location":"%40openzeppelin/contracts/utils/Strings/#tostring","text":"function toString(uint256 value) internal pure returns (string memory) Converts a uint256 to its ASCII string decimal representation.","title":"toString"},{"location":"%40openzeppelin/contracts/utils/Strings/#tostringsigned","text":"function toStringSigned(int256 value) internal pure returns (string memory) Converts a int256 to its ASCII string decimal representation.","title":"toStringSigned"},{"location":"%40openzeppelin/contracts/utils/Strings/#tohexstring","text":"function toHexString(uint256 value) internal pure returns (string memory) Converts a uint256 to its ASCII string hexadecimal representation.","title":"toHexString"},{"location":"%40openzeppelin/contracts/utils/Strings/#tohexstring_1","text":"function toHexString( uint256 value, uint256 length ) internal pure returns (string memory) Converts a uint256 to its ASCII string hexadecimal representation with fixed length.","title":"toHexString"},{"location":"%40openzeppelin/contracts/utils/Strings/#tohexstring_2","text":"function toHexString(address addr) internal pure returns (string memory) Converts an address with fixed length of 20 bytes to its not checksummed ASCII string hexadecimal representation.","title":"toHexString"},{"location":"%40openzeppelin/contracts/utils/Strings/#equal","text":"function equal(string memory a, string memory b) internal pure returns (bool) Returns true if the two strings are equal.","title":"equal"},{"location":"%40openzeppelin/contracts/utils/introspection/ERC165/","text":"ERC165 Overview License: MIT abstract contract ERC165 is IERC165 Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) { return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } Functions info supportsInterface (0x01ffc9a7) function supportsInterface( bytes4 interfaceId ) public view virtual returns (bool) See {IERC165-supportsInterface}.","title":"ERC165"},{"location":"%40openzeppelin/contracts/utils/introspection/ERC165/#erc165","text":"","title":"ERC165"},{"location":"%40openzeppelin/contracts/utils/introspection/ERC165/#overview","text":"","title":"Overview"},{"location":"%40openzeppelin/contracts/utils/introspection/ERC165/#license-mit","text":"","title":"License: MIT"},{"location":"%40openzeppelin/contracts/utils/introspection/ERC165/#_1","text":"abstract contract ERC165 is IERC165 Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) { return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); }","title":""},{"location":"%40openzeppelin/contracts/utils/introspection/ERC165/#functions-info","text":"","title":"Functions info"},{"location":"%40openzeppelin/contracts/utils/introspection/ERC165/#supportsinterface-0x01ffc9a7","text":"function supportsInterface( bytes4 interfaceId ) public view virtual returns (bool) See {IERC165-supportsInterface}.","title":"supportsInterface (0x01ffc9a7)"},{"location":"%40openzeppelin/contracts/utils/introspection/IERC165/","text":"IERC165 Overview License: MIT interface IERC165 Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}. Functions info supportsInterface (0x01ffc9a7) function supportsInterface(bytes4 interfaceId) external view returns (bool) Returns true if this contract implements the interface defined by interfaceId . See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.","title":"IERC165"},{"location":"%40openzeppelin/contracts/utils/introspection/IERC165/#ierc165","text":"","title":"IERC165"},{"location":"%40openzeppelin/contracts/utils/introspection/IERC165/#overview","text":"","title":"Overview"},{"location":"%40openzeppelin/contracts/utils/introspection/IERC165/#license-mit","text":"","title":"License: MIT"},{"location":"%40openzeppelin/contracts/utils/introspection/IERC165/#_1","text":"interface IERC165 Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","title":""},{"location":"%40openzeppelin/contracts/utils/introspection/IERC165/#functions-info","text":"","title":"Functions info"},{"location":"%40openzeppelin/contracts/utils/introspection/IERC165/#supportsinterface-0x01ffc9a7","text":"function supportsInterface(bytes4 interfaceId) external view returns (bool) Returns true if this contract implements the interface defined by interfaceId . See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.","title":"supportsInterface (0x01ffc9a7)"},{"location":"%40openzeppelin/contracts/utils/math/Math/","text":"Math Overview License: MIT library Math Standard math utilities missing in the Solidity language. Enums info Rounding enum Rounding { Floor, Ceil, Trunc, Expand } Errors info MathOverflowedMulDiv error MathOverflowedMulDiv() Muldiv operation overflow. Functions info tryAdd function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) Returns the addition of two unsigned integers, with an overflow flag. trySub function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) Returns the subtraction of two unsigned integers, with an overflow flag. tryMul function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) Returns the multiplication of two unsigned integers, with an overflow flag. tryDiv function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) Returns the division of two unsigned integers, with a division by zero flag. tryMod function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) Returns the remainder of dividing two unsigned integers, with a division by zero flag. max function max(uint256 a, uint256 b) internal pure returns (uint256) Returns the largest of two numbers. min function min(uint256 a, uint256 b) internal pure returns (uint256) Returns the smallest of two numbers. average function average(uint256 a, uint256 b) internal pure returns (uint256) Returns the average of two numbers. The result is rounded towards zero. ceilDiv function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) Returns the ceiling of the division of two numbers. This differs from standard division with / in that it rounds towards infinity instead of rounding towards zero. mulDiv function mulDiv( uint256 x, uint256 y, uint256 denominator ) internal pure returns (uint256 result) Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0. Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by Uniswap Labs also under MIT license. mulDiv function mulDiv( uint256 x, uint256 y, uint256 denominator, Math.Rounding rounding ) internal pure returns (uint256) Calculates x * y / denominator with full precision, following the selected rounding direction. sqrt function sqrt(uint256 a) internal pure returns (uint256) Returns the square root of a number. If the number is not a perfect square, the value is rounded towards zero. Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11). sqrt function sqrt( uint256 a, Math.Rounding rounding ) internal pure returns (uint256) Calculates sqrt(a), following the selected rounding direction. log2 function log2(uint256 value) internal pure returns (uint256) Return the log in base 2 of a positive value rounded towards zero. Returns 0 if given 0. log2 function log2( uint256 value, Math.Rounding rounding ) internal pure returns (uint256) Return the log in base 2, following the selected rounding direction, of a positive value. Returns 0 if given 0. log10 function log10(uint256 value) internal pure returns (uint256) Return the log in base 10 of a positive value rounded towards zero. Returns 0 if given 0. log10 function log10( uint256 value, Math.Rounding rounding ) internal pure returns (uint256) Return the log in base 10, following the selected rounding direction, of a positive value. Returns 0 if given 0. log256 function log256(uint256 value) internal pure returns (uint256) Return the log in base 256 of a positive value rounded towards zero. Returns 0 if given 0. Adding one to the result gives the number of pairs of hex symbols needed to represent value as a hex string. log256 function log256( uint256 value, Math.Rounding rounding ) internal pure returns (uint256) Return the log in base 256, following the selected rounding direction, of a positive value. Returns 0 if given 0. unsignedRoundsUp function unsignedRoundsUp(Math.Rounding rounding) internal pure returns (bool) Returns whether a provided rounding mode is considered rounding up for unsigned integers.","title":"Math"},{"location":"%40openzeppelin/contracts/utils/math/Math/#math","text":"","title":"Math"},{"location":"%40openzeppelin/contracts/utils/math/Math/#overview","text":"","title":"Overview"},{"location":"%40openzeppelin/contracts/utils/math/Math/#license-mit","text":"","title":"License: MIT"},{"location":"%40openzeppelin/contracts/utils/math/Math/#_1","text":"library Math Standard math utilities missing in the Solidity language.","title":""},{"location":"%40openzeppelin/contracts/utils/math/Math/#enums-info","text":"","title":"Enums info"},{"location":"%40openzeppelin/contracts/utils/math/Math/#rounding","text":"enum Rounding { Floor, Ceil, Trunc, Expand }","title":"Rounding"},{"location":"%40openzeppelin/contracts/utils/math/Math/#errors-info","text":"","title":"Errors info"},{"location":"%40openzeppelin/contracts/utils/math/Math/#mathoverflowedmuldiv","text":"error MathOverflowedMulDiv() Muldiv operation overflow.","title":"MathOverflowedMulDiv"},{"location":"%40openzeppelin/contracts/utils/math/Math/#functions-info","text":"","title":"Functions info"},{"location":"%40openzeppelin/contracts/utils/math/Math/#tryadd","text":"function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) Returns the addition of two unsigned integers, with an overflow flag.","title":"tryAdd"},{"location":"%40openzeppelin/contracts/utils/math/Math/#trysub","text":"function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) Returns the subtraction of two unsigned integers, with an overflow flag.","title":"trySub"},{"location":"%40openzeppelin/contracts/utils/math/Math/#trymul","text":"function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) Returns the multiplication of two unsigned integers, with an overflow flag.","title":"tryMul"},{"location":"%40openzeppelin/contracts/utils/math/Math/#trydiv","text":"function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) Returns the division of two unsigned integers, with a division by zero flag.","title":"tryDiv"},{"location":"%40openzeppelin/contracts/utils/math/Math/#trymod","text":"function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) Returns the remainder of dividing two unsigned integers, with a division by zero flag.","title":"tryMod"},{"location":"%40openzeppelin/contracts/utils/math/Math/#max","text":"function max(uint256 a, uint256 b) internal pure returns (uint256) Returns the largest of two numbers.","title":"max"},{"location":"%40openzeppelin/contracts/utils/math/Math/#min","text":"function min(uint256 a, uint256 b) internal pure returns (uint256) Returns the smallest of two numbers.","title":"min"},{"location":"%40openzeppelin/contracts/utils/math/Math/#average","text":"function average(uint256 a, uint256 b) internal pure returns (uint256) Returns the average of two numbers. The result is rounded towards zero.","title":"average"},{"location":"%40openzeppelin/contracts/utils/math/Math/#ceildiv","text":"function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) Returns the ceiling of the division of two numbers. This differs from standard division with / in that it rounds towards infinity instead of rounding towards zero.","title":"ceilDiv"},{"location":"%40openzeppelin/contracts/utils/math/Math/#muldiv","text":"function mulDiv( uint256 x, uint256 y, uint256 denominator ) internal pure returns (uint256 result) Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0. Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by Uniswap Labs also under MIT license.","title":"mulDiv"},{"location":"%40openzeppelin/contracts/utils/math/Math/#muldiv_1","text":"function mulDiv( uint256 x, uint256 y, uint256 denominator, Math.Rounding rounding ) internal pure returns (uint256) Calculates x * y / denominator with full precision, following the selected rounding direction.","title":"mulDiv"},{"location":"%40openzeppelin/contracts/utils/math/Math/#sqrt","text":"function sqrt(uint256 a) internal pure returns (uint256) Returns the square root of a number. If the number is not a perfect square, the value is rounded towards zero. Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).","title":"sqrt"},{"location":"%40openzeppelin/contracts/utils/math/Math/#sqrt_1","text":"function sqrt( uint256 a, Math.Rounding rounding ) internal pure returns (uint256) Calculates sqrt(a), following the selected rounding direction.","title":"sqrt"},{"location":"%40openzeppelin/contracts/utils/math/Math/#log2","text":"function log2(uint256 value) internal pure returns (uint256) Return the log in base 2 of a positive value rounded towards zero. Returns 0 if given 0.","title":"log2"},{"location":"%40openzeppelin/contracts/utils/math/Math/#log2_1","text":"function log2( uint256 value, Math.Rounding rounding ) internal pure returns (uint256) Return the log in base 2, following the selected rounding direction, of a positive value. Returns 0 if given 0.","title":"log2"},{"location":"%40openzeppelin/contracts/utils/math/Math/#log10","text":"function log10(uint256 value) internal pure returns (uint256) Return the log in base 10 of a positive value rounded towards zero. Returns 0 if given 0.","title":"log10"},{"location":"%40openzeppelin/contracts/utils/math/Math/#log10_1","text":"function log10( uint256 value, Math.Rounding rounding ) internal pure returns (uint256) Return the log in base 10, following the selected rounding direction, of a positive value. Returns 0 if given 0.","title":"log10"},{"location":"%40openzeppelin/contracts/utils/math/Math/#log256","text":"function log256(uint256 value) internal pure returns (uint256) Return the log in base 256 of a positive value rounded towards zero. Returns 0 if given 0. Adding one to the result gives the number of pairs of hex symbols needed to represent value as a hex string.","title":"log256"},{"location":"%40openzeppelin/contracts/utils/math/Math/#log256_1","text":"function log256( uint256 value, Math.Rounding rounding ) internal pure returns (uint256) Return the log in base 256, following the selected rounding direction, of a positive value. Returns 0 if given 0.","title":"log256"},{"location":"%40openzeppelin/contracts/utils/math/Math/#unsignedroundsup","text":"function unsignedRoundsUp(Math.Rounding rounding) internal pure returns (bool) Returns whether a provided rounding mode is considered rounding up for unsigned integers.","title":"unsignedRoundsUp"},{"location":"%40openzeppelin/contracts/utils/math/SignedMath/","text":"SignedMath Overview License: MIT library SignedMath Standard signed math utilities missing in the Solidity language. Functions info max function max(int256 a, int256 b) internal pure returns (int256) Returns the largest of two signed numbers. min function min(int256 a, int256 b) internal pure returns (int256) Returns the smallest of two signed numbers. average function average(int256 a, int256 b) internal pure returns (int256) Returns the average of two signed numbers without overflow. The result is rounded towards zero. abs function abs(int256 n) internal pure returns (uint256) Returns the absolute unsigned value of a signed value.","title":"SignedMath"},{"location":"%40openzeppelin/contracts/utils/math/SignedMath/#signedmath","text":"","title":"SignedMath"},{"location":"%40openzeppelin/contracts/utils/math/SignedMath/#overview","text":"","title":"Overview"},{"location":"%40openzeppelin/contracts/utils/math/SignedMath/#license-mit","text":"","title":"License: MIT"},{"location":"%40openzeppelin/contracts/utils/math/SignedMath/#_1","text":"library SignedMath Standard signed math utilities missing in the Solidity language.","title":""},{"location":"%40openzeppelin/contracts/utils/math/SignedMath/#functions-info","text":"","title":"Functions info"},{"location":"%40openzeppelin/contracts/utils/math/SignedMath/#max","text":"function max(int256 a, int256 b) internal pure returns (int256) Returns the largest of two signed numbers.","title":"max"},{"location":"%40openzeppelin/contracts/utils/math/SignedMath/#min","text":"function min(int256 a, int256 b) internal pure returns (int256) Returns the smallest of two signed numbers.","title":"min"},{"location":"%40openzeppelin/contracts/utils/math/SignedMath/#average","text":"function average(int256 a, int256 b) internal pure returns (int256) Returns the average of two signed numbers without overflow. The result is rounded towards zero.","title":"average"},{"location":"%40openzeppelin/contracts/utils/math/SignedMath/#abs","text":"function abs(int256 n) internal pure returns (uint256) Returns the absolute unsigned value of a signed value.","title":"abs"},{"location":"base64-sol/Base64/","text":"Base64 Overview License: MIT library Base64 Author: Brecht Devos - brecht@loopring.org Provides functions for encoding/decoding base64 Functions info encode function encode(bytes memory data) internal pure returns (string memory) decode function decode(string memory _data) internal pure returns (bytes memory)","title":"Base64"},{"location":"base64-sol/Base64/#base64","text":"","title":"Base64"},{"location":"base64-sol/Base64/#overview","text":"","title":"Overview"},{"location":"base64-sol/Base64/#license-mit","text":"","title":"License: MIT"},{"location":"base64-sol/Base64/#_1","text":"library Base64 Author: Brecht Devos - brecht@loopring.org Provides functions for encoding/decoding base64","title":""},{"location":"base64-sol/Base64/#functions-info","text":"","title":"Functions info"},{"location":"base64-sol/Base64/#encode","text":"function encode(bytes memory data) internal pure returns (string memory)","title":"encode"},{"location":"base64-sol/Base64/#decode","text":"function decode(string memory _data) internal pure returns (bytes memory)","title":"decode"},{"location":"contracts/OnChainTraits/","text":"OnChainTraits Overview License: UNLICENSED abstract contract OnChainTraits Author: 0xstabby.eth Inherit from this abstract to use on-chain metadata Just setTraits, and return getMetadata from tokenURI in implementation State variables info traitTypeCount (0x89028bcb) uint256 traitTypeCount traitValueCount (0xa0789c39) uint256 traitValueCount seed (0x7d94792a) uint256 seed _name (0xd28d8852) string _name _symbol (0xb09f1266) string _symbol description (0x7284e416) string description Functions info getTraits (0xe1dc0761) function getTraits( uint256 id ) public view virtual returns (OnChainDataStructs.Trait[] memory) Get traits for id Can be overridden Parameters: Name Type Description id uint256 To grab traits for Return values: Name Type Description [0] struct OnChainDataStructs.Trait[] Array of Traits getMetadata (0xa574cea4) function getMetadata(uint256 id) public view virtual returns (string memory) Get metadata for id Can be overridden Parameters: Name Type Description id uint256 To grab metadata for Return values: Name Type Description [0] string String of base64 encoded metadata getImage (0x2607aafa) function getImage(uint256 id) public view virtual returns (string memory) Get image Can be overridden Parameters: Name Type Description id uint256 To get image for Return values: Name Type Description [0] string String of base64 encoded svg","title":"OnChainTraits"},{"location":"contracts/OnChainTraits/#onchaintraits","text":"","title":"OnChainTraits"},{"location":"contracts/OnChainTraits/#overview","text":"","title":"Overview"},{"location":"contracts/OnChainTraits/#license-unlicensed","text":"","title":"License: UNLICENSED"},{"location":"contracts/OnChainTraits/#_1","text":"abstract contract OnChainTraits Author: 0xstabby.eth Inherit from this abstract to use on-chain metadata Just setTraits, and return getMetadata from tokenURI in implementation","title":""},{"location":"contracts/OnChainTraits/#state-variables-info","text":"","title":"State variables info"},{"location":"contracts/OnChainTraits/#traittypecount-0x89028bcb","text":"uint256 traitTypeCount","title":"traitTypeCount (0x89028bcb)"},{"location":"contracts/OnChainTraits/#traitvaluecount-0xa0789c39","text":"uint256 traitValueCount","title":"traitValueCount (0xa0789c39)"},{"location":"contracts/OnChainTraits/#seed-0x7d94792a","text":"uint256 seed","title":"seed (0x7d94792a)"},{"location":"contracts/OnChainTraits/#_name-0xd28d8852","text":"string _name","title":"_name (0xd28d8852)"},{"location":"contracts/OnChainTraits/#_symbol-0xb09f1266","text":"string _symbol","title":"_symbol (0xb09f1266)"},{"location":"contracts/OnChainTraits/#description-0x7284e416","text":"string description","title":"description (0x7284e416)"},{"location":"contracts/OnChainTraits/#functions-info","text":"","title":"Functions info"},{"location":"contracts/OnChainTraits/#gettraits-0xe1dc0761","text":"function getTraits( uint256 id ) public view virtual returns (OnChainDataStructs.Trait[] memory) Get traits for id Can be overridden Parameters: Name Type Description id uint256 To grab traits for Return values: Name Type Description [0] struct OnChainDataStructs.Trait[] Array of Traits","title":"getTraits (0xe1dc0761)"},{"location":"contracts/OnChainTraits/#getmetadata-0xa574cea4","text":"function getMetadata(uint256 id) public view virtual returns (string memory) Get metadata for id Can be overridden Parameters: Name Type Description id uint256 To grab metadata for Return values: Name Type Description [0] string String of base64 encoded metadata","title":"getMetadata (0xa574cea4)"},{"location":"contracts/OnChainTraits/#getimage-0x2607aafa","text":"function getImage(uint256 id) public view virtual returns (string memory) Get image Can be overridden Parameters: Name Type Description id uint256 To get image for Return values: Name Type Description [0] string String of base64 encoded svg","title":"getImage (0x2607aafa)"},{"location":"contracts/libs/AssetBuilder/","text":"AssetBuilder Overview License: UNLICENSED library AssetBuilder Author: 0xstabby.eth Lib for building on-chain images Functions info buildSvg function buildSvg( OnChainDataStructs.Metadata memory metadata ) internal pure returns (string memory) Build SVG for metadata Parameters: Name Type Description metadata struct OnChainDataStructs.Metadata Metadata to build svg for Return values: Name Type Description [0] string String of svg","title":"AssetBuilder"},{"location":"contracts/libs/AssetBuilder/#assetbuilder","text":"","title":"AssetBuilder"},{"location":"contracts/libs/AssetBuilder/#overview","text":"","title":"Overview"},{"location":"contracts/libs/AssetBuilder/#license-unlicensed","text":"","title":"License: UNLICENSED"},{"location":"contracts/libs/AssetBuilder/#_1","text":"library AssetBuilder Author: 0xstabby.eth Lib for building on-chain images","title":""},{"location":"contracts/libs/AssetBuilder/#functions-info","text":"","title":"Functions info"},{"location":"contracts/libs/AssetBuilder/#buildsvg","text":"function buildSvg( OnChainDataStructs.Metadata memory metadata ) internal pure returns (string memory) Build SVG for metadata Parameters: Name Type Description metadata struct OnChainDataStructs.Metadata Metadata to build svg for Return values: Name Type Description [0] string String of svg","title":"buildSvg"},{"location":"contracts/libs/Base64Encoder/","text":"Base64Encoder Overview License: UNLICENSED library Base64Encoder Author: 0xstabby.eth Lib for base64 encoding and prefixing Functions info encodeMetadata function encodeMetadata( string memory metadata ) internal pure returns (string memory) encodeSvg function encodeSvg(string memory image) internal pure returns (string memory)","title":"Base64Encoder"},{"location":"contracts/libs/Base64Encoder/#base64encoder","text":"","title":"Base64Encoder"},{"location":"contracts/libs/Base64Encoder/#overview","text":"","title":"Overview"},{"location":"contracts/libs/Base64Encoder/#license-unlicensed","text":"","title":"License: UNLICENSED"},{"location":"contracts/libs/Base64Encoder/#_1","text":"library Base64Encoder Author: 0xstabby.eth Lib for base64 encoding and prefixing","title":""},{"location":"contracts/libs/Base64Encoder/#functions-info","text":"","title":"Functions info"},{"location":"contracts/libs/Base64Encoder/#encodemetadata","text":"function encodeMetadata( string memory metadata ) internal pure returns (string memory)","title":"encodeMetadata"},{"location":"contracts/libs/Base64Encoder/#encodesvg","text":"function encodeSvg(string memory image) internal pure returns (string memory)","title":"encodeSvg"},{"location":"contracts/libs/Constants/","text":"Constants Overview License: UNLICENSED library Constants Author: 0xstabby.eth Lib for constants needed in base64 prefixing and SVG building","title":"Constants"},{"location":"contracts/libs/Constants/#constants","text":"","title":"Constants"},{"location":"contracts/libs/Constants/#overview","text":"","title":"Overview"},{"location":"contracts/libs/Constants/#license-unlicensed","text":"","title":"License: UNLICENSED"},{"location":"contracts/libs/Constants/#_1","text":"library Constants Author: 0xstabby.eth Lib for constants needed in base64 prefixing and SVG building","title":""},{"location":"contracts/libs/MetadataBuilder/","text":"MetadataBuilder Overview License: UNLICENSED library MetadataBuilder Author: 0xstabby.eth Lib for building on-chain metadata Functions info buildMetadata function buildMetadata( uint256 id, string memory image, OnChainDataStructs.Metadata memory metadata ) internal pure returns (string memory) Build metadata string for id with image and metadata Parameters: Name Type Description id uint256 To build metadata for image string To insert in metadata string metadata struct OnChainDataStructs.Metadata To insert in metadata string Return values: Name Type Description [0] string String of metadata","title":"MetadataBuilder"},{"location":"contracts/libs/MetadataBuilder/#metadatabuilder","text":"","title":"MetadataBuilder"},{"location":"contracts/libs/MetadataBuilder/#overview","text":"","title":"Overview"},{"location":"contracts/libs/MetadataBuilder/#license-unlicensed","text":"","title":"License: UNLICENSED"},{"location":"contracts/libs/MetadataBuilder/#_1","text":"library MetadataBuilder Author: 0xstabby.eth Lib for building on-chain metadata","title":""},{"location":"contracts/libs/MetadataBuilder/#functions-info","text":"","title":"Functions info"},{"location":"contracts/libs/MetadataBuilder/#buildmetadata","text":"function buildMetadata( uint256 id, string memory image, OnChainDataStructs.Metadata memory metadata ) internal pure returns (string memory) Build metadata string for id with image and metadata Parameters: Name Type Description id uint256 To build metadata for image string To insert in metadata string metadata struct OnChainDataStructs.Metadata To insert in metadata string Return values: Name Type Description [0] string String of metadata","title":"buildMetadata"},{"location":"contracts/libs/OnChainDataStructs/","text":"OnChainDataStructs Overview License: UNLICENSED library OnChainDataStructs Author: 0xstabby.eth Shared structs for OnChainTraits Structs info Trait struct Trait { string key; string value; } Metadata struct Metadata { string name; string description; OnChainDataStructs.Trait[] traits; }","title":"OnChainDataStructs"},{"location":"contracts/libs/OnChainDataStructs/#onchaindatastructs","text":"","title":"OnChainDataStructs"},{"location":"contracts/libs/OnChainDataStructs/#overview","text":"","title":"Overview"},{"location":"contracts/libs/OnChainDataStructs/#license-unlicensed","text":"","title":"License: UNLICENSED"},{"location":"contracts/libs/OnChainDataStructs/#_1","text":"library OnChainDataStructs Author: 0xstabby.eth Shared structs for OnChainTraits","title":""},{"location":"contracts/libs/OnChainDataStructs/#structs-info","text":"","title":"Structs info"},{"location":"contracts/libs/OnChainDataStructs/#trait","text":"struct Trait { string key; string value; }","title":"Trait"},{"location":"contracts/libs/OnChainDataStructs/#metadata","text":"struct Metadata { string name; string description; OnChainDataStructs.Trait[] traits; }","title":"Metadata"},{"location":"contracts/libs/Random/","text":"Random Overview License: UNLICENSED library Random Author: 0xstabby.eth Libs for (sudo)random number generation Functions info random function random( uint256 seed, uint256 id, uint256 size ) internal pure returns (uint256) random function random( uint256 seed, uint256 id, uint256 size, uint256 count ) internal pure returns (uint256)","title":"Random"},{"location":"contracts/libs/Random/#random","text":"","title":"Random"},{"location":"contracts/libs/Random/#overview","text":"","title":"Overview"},{"location":"contracts/libs/Random/#license-unlicensed","text":"","title":"License: UNLICENSED"},{"location":"contracts/libs/Random/#_1","text":"library Random Author: 0xstabby.eth Libs for (sudo)random number generation","title":""},{"location":"contracts/libs/Random/#functions-info","text":"","title":"Functions info"},{"location":"contracts/libs/Random/#random_1","text":"function random( uint256 seed, uint256 id, uint256 size ) internal pure returns (uint256)","title":"random"},{"location":"contracts/libs/Random/#random_2","text":"function random( uint256 seed, uint256 id, uint256 size, uint256 count ) internal pure returns (uint256)","title":"random"},{"location":"contracts/reference/ERC721oc/","text":"ERC721oc Overview License: UNLICENSED contract ERC721oc is OnChainTraits, Ownable, ERC721 Author: 0xstabby.eth ERC721 OnChainTraits implementation Functions info constructor constructor( string memory name, string memory symbol, string memory description ) Ownable(msg.sender) ERC721(name, symbol) OnChainTraits(name, symbol, description) Initialize metadata with collection values Pass name/symbol data to base constructors Parameters: Name Type Description name string Name for metadata symbol string Symbol for metadata description string Description for metadata tokenURI (0xc87b56dd) function tokenURI(uint256 id) public view override returns (string memory) TokenURI returns base64URI metadata with a base64URI image Parameters: Name Type Description id uint256 Of ERC721 setTraits (0xbbd6e196) function setTraits( OnChainDataStructs.Trait[] memory traits ) public payable onlyOwner Setup traits and values Parameters: Name Type Description traits struct OnChainDataStructs.Trait[] Array of traits to setup reveal (0xc2ca0ac5) function reveal(uint256 _seed) public payable onlyOwner Reveal function with seed Parameters: Name Type Description _seed uint256 To initialize metadata with","title":"ERC721oc"},{"location":"contracts/reference/ERC721oc/#erc721oc","text":"","title":"ERC721oc"},{"location":"contracts/reference/ERC721oc/#overview","text":"","title":"Overview"},{"location":"contracts/reference/ERC721oc/#license-unlicensed","text":"","title":"License: UNLICENSED"},{"location":"contracts/reference/ERC721oc/#_1","text":"contract ERC721oc is OnChainTraits, Ownable, ERC721 Author: 0xstabby.eth ERC721 OnChainTraits implementation","title":""},{"location":"contracts/reference/ERC721oc/#functions-info","text":"","title":"Functions info"},{"location":"contracts/reference/ERC721oc/#constructor","text":"constructor( string memory name, string memory symbol, string memory description ) Ownable(msg.sender) ERC721(name, symbol) OnChainTraits(name, symbol, description) Initialize metadata with collection values Pass name/symbol data to base constructors Parameters: Name Type Description name string Name for metadata symbol string Symbol for metadata description string Description for metadata","title":"constructor"},{"location":"contracts/reference/ERC721oc/#tokenuri-0xc87b56dd","text":"function tokenURI(uint256 id) public view override returns (string memory) TokenURI returns base64URI metadata with a base64URI image Parameters: Name Type Description id uint256 Of ERC721","title":"tokenURI (0xc87b56dd)"},{"location":"contracts/reference/ERC721oc/#settraits-0xbbd6e196","text":"function setTraits( OnChainDataStructs.Trait[] memory traits ) public payable onlyOwner Setup traits and values Parameters: Name Type Description traits struct OnChainDataStructs.Trait[] Array of traits to setup","title":"setTraits (0xbbd6e196)"},{"location":"contracts/reference/ERC721oc/#reveal-0xc2ca0ac5","text":"function reveal(uint256 _seed) public payable onlyOwner Reveal function with seed Parameters: Name Type Description _seed uint256 To initialize metadata with","title":"reveal (0xc2ca0ac5)"},{"location":"contracts/test/MinimalTest/","text":"MinimalTest Overview License: UNLICENSED contract MinimalTest is OnChainTraits Author: 0xstabby.eth Test for testing OnChainTraits without ERC721 overhead Functions info constructor constructor( string memory name, string memory symbol, string memory description ) OnChainTraits(name, symbol, description) tokenURI (0xc87b56dd) function tokenURI(uint256 id) public view returns (string memory)","title":"MinimalTest"},{"location":"contracts/test/MinimalTest/#minimaltest","text":"","title":"MinimalTest"},{"location":"contracts/test/MinimalTest/#overview","text":"","title":"Overview"},{"location":"contracts/test/MinimalTest/#license-unlicensed","text":"","title":"License: UNLICENSED"},{"location":"contracts/test/MinimalTest/#_1","text":"contract MinimalTest is OnChainTraits Author: 0xstabby.eth Test for testing OnChainTraits without ERC721 overhead","title":""},{"location":"contracts/test/MinimalTest/#functions-info","text":"","title":"Functions info"},{"location":"contracts/test/MinimalTest/#constructor","text":"constructor( string memory name, string memory symbol, string memory description ) OnChainTraits(name, symbol, description)","title":"constructor"},{"location":"contracts/test/MinimalTest/#tokenuri-0xc87b56dd","text":"function tokenURI(uint256 id) public view returns (string memory)","title":"tokenURI (0xc87b56dd)"},{"location":"contracts/test/RandomTest/","text":"RandomTest Overview License: UNLICENSED contract RandomTest Author: 0xstabby.eth Test for random lib Functions info constructor constructor()","title":"RandomTest"},{"location":"contracts/test/RandomTest/#randomtest","text":"","title":"RandomTest"},{"location":"contracts/test/RandomTest/#overview","text":"","title":"Overview"},{"location":"contracts/test/RandomTest/#license-unlicensed","text":"","title":"License: UNLICENSED"},{"location":"contracts/test/RandomTest/#_1","text":"contract RandomTest Author: 0xstabby.eth Test for random lib","title":""},{"location":"contracts/test/RandomTest/#functions-info","text":"","title":"Functions info"},{"location":"contracts/test/RandomTest/#constructor","text":"constructor()","title":"constructor"},{"location":"elin/contracts/access/Ownable/","text":"Ownable Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier onlyOwner , which can be applied to your functions to restrict their use to the owner. Methods owner function owner() external view returns (address) Returns the address of the current owner. Returns Name Type Description _0 address undefined renounceOwnership function renounceOwnership() external nonpayable Leaves the contract without owner. It will not be possible to call onlyOwner functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner. transferOwnership function transferOwnership(address newOwner) external nonpayable Transfers ownership of the contract to a new account ( newOwner ). Can only be called by the current owner. Parameters Name Type Description newOwner address undefined Events OwnershipTransferred event OwnershipTransferred(address indexed previousOwner, address indexed newOwner) Parameters Name Type Description previousOwner indexed address undefined newOwner indexed address undefined Errors OwnableInvalidOwner error OwnableInvalidOwner(address owner) The owner is not a valid owner account. (eg. address(0) ) Parameters Name Type Description owner address undefined OwnableUnauthorizedAccount error OwnableUnauthorizedAccount(address account) The caller account is not authorized to perform an operation. Parameters Name Type Description account address undefined","title":"Ownable"},{"location":"elin/contracts/access/Ownable/#ownable","text":"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier onlyOwner , which can be applied to your functions to restrict their use to the owner.","title":"Ownable"},{"location":"elin/contracts/access/Ownable/#methods","text":"","title":"Methods"},{"location":"elin/contracts/access/Ownable/#owner","text":"function owner() external view returns (address) Returns the address of the current owner.","title":"owner"},{"location":"elin/contracts/access/Ownable/#returns","text":"Name Type Description _0 address undefined","title":"Returns"},{"location":"elin/contracts/access/Ownable/#renounceownership","text":"function renounceOwnership() external nonpayable Leaves the contract without owner. It will not be possible to call onlyOwner functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.","title":"renounceOwnership"},{"location":"elin/contracts/access/Ownable/#transferownership","text":"function transferOwnership(address newOwner) external nonpayable Transfers ownership of the contract to a new account ( newOwner ). Can only be called by the current owner.","title":"transferOwnership"},{"location":"elin/contracts/access/Ownable/#parameters","text":"Name Type Description newOwner address undefined","title":"Parameters"},{"location":"elin/contracts/access/Ownable/#events","text":"","title":"Events"},{"location":"elin/contracts/access/Ownable/#ownershiptransferred","text":"event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)","title":"OwnershipTransferred"},{"location":"elin/contracts/access/Ownable/#parameters_1","text":"Name Type Description previousOwner indexed address undefined newOwner indexed address undefined","title":"Parameters"},{"location":"elin/contracts/access/Ownable/#errors","text":"","title":"Errors"},{"location":"elin/contracts/access/Ownable/#ownableinvalidowner","text":"error OwnableInvalidOwner(address owner) The owner is not a valid owner account. (eg. address(0) )","title":"OwnableInvalidOwner"},{"location":"elin/contracts/access/Ownable/#parameters_2","text":"Name Type Description owner address undefined","title":"Parameters"},{"location":"elin/contracts/access/Ownable/#ownableunauthorizedaccount","text":"error OwnableUnauthorizedAccount(address account) The caller account is not authorized to perform an operation.","title":"OwnableUnauthorizedAccount"},{"location":"elin/contracts/access/Ownable/#parameters_3","text":"Name Type Description account address undefined","title":"Parameters"},{"location":"elin/contracts/interfaces/IERC1155Errors/","text":"IERC1155Errors Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens. Errors ERC1155InsufficientBalance error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId) Indicates an error related to the current balance of a sender . Used in transfers. Parameters Name Type Description sender address Address whose tokens are being transferred. balance uint256 Current balance for the interacting account. needed uint256 Minimum amount required to perform a transfer. tokenId uint256 Identifier number of a token. ERC1155InvalidApprover error ERC1155InvalidApprover(address approver) Indicates a failure with the approver of a token to be approved. Used in approvals. Parameters Name Type Description approver address Address initiating an approval operation. ERC1155InvalidArrayLength error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength) Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers. Parameters Name Type Description idsLength uint256 Length of the array of token identifiers valuesLength uint256 Length of the array of token amounts ERC1155InvalidOperator error ERC1155InvalidOperator(address operator) Indicates a failure with the operator to be approved. Used in approvals. Parameters Name Type Description operator address Address that may be allowed to operate on tokens without being their owner. ERC1155InvalidReceiver error ERC1155InvalidReceiver(address receiver) Indicates a failure with the token receiver . Used in transfers. Parameters Name Type Description receiver address Address to which tokens are being transferred. ERC1155InvalidSender error ERC1155InvalidSender(address sender) Indicates a failure with the token sender . Used in transfers. Parameters Name Type Description sender address Address whose tokens are being transferred. ERC1155MissingApprovalForAll error ERC1155MissingApprovalForAll(address operator, address owner) Indicates a failure with the operator \u2019s approval. Used in transfers. Parameters Name Type Description operator address Address that may be allowed to operate on tokens without being their owner. owner address Address of the current owner of a token.","title":"IERC1155Errors"},{"location":"elin/contracts/interfaces/IERC1155Errors/#ierc1155errors","text":"Standard ERC1155 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.","title":"IERC1155Errors"},{"location":"elin/contracts/interfaces/IERC1155Errors/#errors","text":"","title":"Errors"},{"location":"elin/contracts/interfaces/IERC1155Errors/#erc1155insufficientbalance","text":"error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId) Indicates an error related to the current balance of a sender . Used in transfers.","title":"ERC1155InsufficientBalance"},{"location":"elin/contracts/interfaces/IERC1155Errors/#parameters","text":"Name Type Description sender address Address whose tokens are being transferred. balance uint256 Current balance for the interacting account. needed uint256 Minimum amount required to perform a transfer. tokenId uint256 Identifier number of a token.","title":"Parameters"},{"location":"elin/contracts/interfaces/IERC1155Errors/#erc1155invalidapprover","text":"error ERC1155InvalidApprover(address approver) Indicates a failure with the approver of a token to be approved. Used in approvals.","title":"ERC1155InvalidApprover"},{"location":"elin/contracts/interfaces/IERC1155Errors/#parameters_1","text":"Name Type Description approver address Address initiating an approval operation.","title":"Parameters"},{"location":"elin/contracts/interfaces/IERC1155Errors/#erc1155invalidarraylength","text":"error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength) Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation. Used in batch transfers.","title":"ERC1155InvalidArrayLength"},{"location":"elin/contracts/interfaces/IERC1155Errors/#parameters_2","text":"Name Type Description idsLength uint256 Length of the array of token identifiers valuesLength uint256 Length of the array of token amounts","title":"Parameters"},{"location":"elin/contracts/interfaces/IERC1155Errors/#erc1155invalidoperator","text":"error ERC1155InvalidOperator(address operator) Indicates a failure with the operator to be approved. Used in approvals.","title":"ERC1155InvalidOperator"},{"location":"elin/contracts/interfaces/IERC1155Errors/#parameters_3","text":"Name Type Description operator address Address that may be allowed to operate on tokens without being their owner.","title":"Parameters"},{"location":"elin/contracts/interfaces/IERC1155Errors/#erc1155invalidreceiver","text":"error ERC1155InvalidReceiver(address receiver) Indicates a failure with the token receiver . Used in transfers.","title":"ERC1155InvalidReceiver"},{"location":"elin/contracts/interfaces/IERC1155Errors/#parameters_4","text":"Name Type Description receiver address Address to which tokens are being transferred.","title":"Parameters"},{"location":"elin/contracts/interfaces/IERC1155Errors/#erc1155invalidsender","text":"error ERC1155InvalidSender(address sender) Indicates a failure with the token sender . Used in transfers.","title":"ERC1155InvalidSender"},{"location":"elin/contracts/interfaces/IERC1155Errors/#parameters_5","text":"Name Type Description sender address Address whose tokens are being transferred.","title":"Parameters"},{"location":"elin/contracts/interfaces/IERC1155Errors/#erc1155missingapprovalforall","text":"error ERC1155MissingApprovalForAll(address operator, address owner) Indicates a failure with the operator \u2019s approval. Used in transfers.","title":"ERC1155MissingApprovalForAll"},{"location":"elin/contracts/interfaces/IERC1155Errors/#parameters_6","text":"Name Type Description operator address Address that may be allowed to operate on tokens without being their owner. owner address Address of the current owner of a token.","title":"Parameters"},{"location":"elin/contracts/interfaces/IERC20Errors/","text":"IERC20Errors Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens. Errors ERC20InsufficientAllowance error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed) Indicates a failure with the spender \u2019s allowance . Used in transfers. Parameters Name Type Description spender address Address that may be allowed to operate on tokens without being their owner. allowance uint256 Amount of tokens a spender is allowed to operate with. needed uint256 Minimum amount required to perform a transfer. ERC20InsufficientBalance error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed) Indicates an error related to the current balance of a sender . Used in transfers. Parameters Name Type Description sender address Address whose tokens are being transferred. balance uint256 Current balance for the interacting account. needed uint256 Minimum amount required to perform a transfer. ERC20InvalidApprover error ERC20InvalidApprover(address approver) Indicates a failure with the approver of a token to be approved. Used in approvals. Parameters Name Type Description approver address Address initiating an approval operation. ERC20InvalidReceiver error ERC20InvalidReceiver(address receiver) Indicates a failure with the token receiver . Used in transfers. Parameters Name Type Description receiver address Address to which tokens are being transferred. ERC20InvalidSender error ERC20InvalidSender(address sender) Indicates a failure with the token sender . Used in transfers. Parameters Name Type Description sender address Address whose tokens are being transferred. ERC20InvalidSpender error ERC20InvalidSpender(address spender) Indicates a failure with the spender to be approved. Used in approvals. Parameters Name Type Description spender address Address that may be allowed to operate on tokens without being their owner.","title":"IERC20Errors"},{"location":"elin/contracts/interfaces/IERC20Errors/#ierc20errors","text":"Standard ERC20 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.","title":"IERC20Errors"},{"location":"elin/contracts/interfaces/IERC20Errors/#errors","text":"","title":"Errors"},{"location":"elin/contracts/interfaces/IERC20Errors/#erc20insufficientallowance","text":"error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed) Indicates a failure with the spender \u2019s allowance . Used in transfers.","title":"ERC20InsufficientAllowance"},{"location":"elin/contracts/interfaces/IERC20Errors/#parameters","text":"Name Type Description spender address Address that may be allowed to operate on tokens without being their owner. allowance uint256 Amount of tokens a spender is allowed to operate with. needed uint256 Minimum amount required to perform a transfer.","title":"Parameters"},{"location":"elin/contracts/interfaces/IERC20Errors/#erc20insufficientbalance","text":"error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed) Indicates an error related to the current balance of a sender . Used in transfers.","title":"ERC20InsufficientBalance"},{"location":"elin/contracts/interfaces/IERC20Errors/#parameters_1","text":"Name Type Description sender address Address whose tokens are being transferred. balance uint256 Current balance for the interacting account. needed uint256 Minimum amount required to perform a transfer.","title":"Parameters"},{"location":"elin/contracts/interfaces/IERC20Errors/#erc20invalidapprover","text":"error ERC20InvalidApprover(address approver) Indicates a failure with the approver of a token to be approved. Used in approvals.","title":"ERC20InvalidApprover"},{"location":"elin/contracts/interfaces/IERC20Errors/#parameters_2","text":"Name Type Description approver address Address initiating an approval operation.","title":"Parameters"},{"location":"elin/contracts/interfaces/IERC20Errors/#erc20invalidreceiver","text":"error ERC20InvalidReceiver(address receiver) Indicates a failure with the token receiver . Used in transfers.","title":"ERC20InvalidReceiver"},{"location":"elin/contracts/interfaces/IERC20Errors/#parameters_3","text":"Name Type Description receiver address Address to which tokens are being transferred.","title":"Parameters"},{"location":"elin/contracts/interfaces/IERC20Errors/#erc20invalidsender","text":"error ERC20InvalidSender(address sender) Indicates a failure with the token sender . Used in transfers.","title":"ERC20InvalidSender"},{"location":"elin/contracts/interfaces/IERC20Errors/#parameters_4","text":"Name Type Description sender address Address whose tokens are being transferred.","title":"Parameters"},{"location":"elin/contracts/interfaces/IERC20Errors/#erc20invalidspender","text":"error ERC20InvalidSpender(address spender) Indicates a failure with the spender to be approved. Used in approvals.","title":"ERC20InvalidSpender"},{"location":"elin/contracts/interfaces/IERC20Errors/#parameters_5","text":"Name Type Description spender address Address that may be allowed to operate on tokens without being their owner.","title":"Parameters"},{"location":"elin/contracts/interfaces/IERC721Errors/","text":"IERC721Errors Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens. Errors ERC721IncorrectOwner error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner) Indicates an error related to the ownership over a particular token. Used in transfers. Parameters Name Type Description sender address Address whose tokens are being transferred. tokenId uint256 Identifier number of a token. owner address Address of the current owner of a token. ERC721InsufficientApproval error ERC721InsufficientApproval(address operator, uint256 tokenId) Indicates a failure with the operator \u2019s approval. Used in transfers. Parameters Name Type Description operator address Address that may be allowed to operate on tokens without being their owner. tokenId uint256 Identifier number of a token. ERC721InvalidApprover error ERC721InvalidApprover(address approver) Indicates a failure with the approver of a token to be approved. Used in approvals. Parameters Name Type Description approver address Address initiating an approval operation. ERC721InvalidOperator error ERC721InvalidOperator(address operator) Indicates a failure with the operator to be approved. Used in approvals. Parameters Name Type Description operator address Address that may be allowed to operate on tokens without being their owner. ERC721InvalidOwner error ERC721InvalidOwner(address owner) Indicates that an address can't be an owner. For example, address(0) is a forbidden owner in EIP-20. Used in balance queries. Parameters Name Type Description owner address Address of the current owner of a token. ERC721InvalidReceiver error ERC721InvalidReceiver(address receiver) Indicates a failure with the token receiver . Used in transfers. Parameters Name Type Description receiver address Address to which tokens are being transferred. ERC721InvalidSender error ERC721InvalidSender(address sender) Indicates a failure with the token sender . Used in transfers. Parameters Name Type Description sender address Address whose tokens are being transferred. ERC721NonexistentToken error ERC721NonexistentToken(uint256 tokenId) Indicates a tokenId whose owner is the zero address. Parameters Name Type Description tokenId uint256 Identifier number of a token.","title":"IERC721Errors"},{"location":"elin/contracts/interfaces/IERC721Errors/#ierc721errors","text":"Standard ERC721 Errors Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.","title":"IERC721Errors"},{"location":"elin/contracts/interfaces/IERC721Errors/#errors","text":"","title":"Errors"},{"location":"elin/contracts/interfaces/IERC721Errors/#erc721incorrectowner","text":"error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner) Indicates an error related to the ownership over a particular token. Used in transfers.","title":"ERC721IncorrectOwner"},{"location":"elin/contracts/interfaces/IERC721Errors/#parameters","text":"Name Type Description sender address Address whose tokens are being transferred. tokenId uint256 Identifier number of a token. owner address Address of the current owner of a token.","title":"Parameters"},{"location":"elin/contracts/interfaces/IERC721Errors/#erc721insufficientapproval","text":"error ERC721InsufficientApproval(address operator, uint256 tokenId) Indicates a failure with the operator \u2019s approval. Used in transfers.","title":"ERC721InsufficientApproval"},{"location":"elin/contracts/interfaces/IERC721Errors/#parameters_1","text":"Name Type Description operator address Address that may be allowed to operate on tokens without being their owner. tokenId uint256 Identifier number of a token.","title":"Parameters"},{"location":"elin/contracts/interfaces/IERC721Errors/#erc721invalidapprover","text":"error ERC721InvalidApprover(address approver) Indicates a failure with the approver of a token to be approved. Used in approvals.","title":"ERC721InvalidApprover"},{"location":"elin/contracts/interfaces/IERC721Errors/#parameters_2","text":"Name Type Description approver address Address initiating an approval operation.","title":"Parameters"},{"location":"elin/contracts/interfaces/IERC721Errors/#erc721invalidoperator","text":"error ERC721InvalidOperator(address operator) Indicates a failure with the operator to be approved. Used in approvals.","title":"ERC721InvalidOperator"},{"location":"elin/contracts/interfaces/IERC721Errors/#parameters_3","text":"Name Type Description operator address Address that may be allowed to operate on tokens without being their owner.","title":"Parameters"},{"location":"elin/contracts/interfaces/IERC721Errors/#erc721invalidowner","text":"error ERC721InvalidOwner(address owner) Indicates that an address can't be an owner. For example, address(0) is a forbidden owner in EIP-20. Used in balance queries.","title":"ERC721InvalidOwner"},{"location":"elin/contracts/interfaces/IERC721Errors/#parameters_4","text":"Name Type Description owner address Address of the current owner of a token.","title":"Parameters"},{"location":"elin/contracts/interfaces/IERC721Errors/#erc721invalidreceiver","text":"error ERC721InvalidReceiver(address receiver) Indicates a failure with the token receiver . Used in transfers.","title":"ERC721InvalidReceiver"},{"location":"elin/contracts/interfaces/IERC721Errors/#parameters_5","text":"Name Type Description receiver address Address to which tokens are being transferred.","title":"Parameters"},{"location":"elin/contracts/interfaces/IERC721Errors/#erc721invalidsender","text":"error ERC721InvalidSender(address sender) Indicates a failure with the token sender . Used in transfers.","title":"ERC721InvalidSender"},{"location":"elin/contracts/interfaces/IERC721Errors/#parameters_6","text":"Name Type Description sender address Address whose tokens are being transferred.","title":"Parameters"},{"location":"elin/contracts/interfaces/IERC721Errors/#erc721nonexistenttoken","text":"error ERC721NonexistentToken(uint256 tokenId) Indicates a tokenId whose owner is the zero address.","title":"ERC721NonexistentToken"},{"location":"elin/contracts/interfaces/IERC721Errors/#parameters_7","text":"Name Type Description tokenId uint256 Identifier number of a token.","title":"Parameters"},{"location":"elin/contracts/token/ERC721/ERC721/","text":"ERC721 Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}. Methods approve function approve(address to, uint256 tokenId) external nonpayable See {IERC721-approve}. Parameters Name Type Description to address undefined tokenId uint256 undefined balanceOf function balanceOf(address owner) external view returns (uint256) See {IERC721-balanceOf}. Parameters Name Type Description owner address undefined Returns Name Type Description _0 uint256 undefined getApproved function getApproved(uint256 tokenId) external view returns (address) See {IERC721-getApproved}. Parameters Name Type Description tokenId uint256 undefined Returns Name Type Description _0 address undefined isApprovedForAll function isApprovedForAll(address owner, address operator) external view returns (bool) See {IERC721-isApprovedForAll}. Parameters Name Type Description owner address undefined operator address undefined Returns Name Type Description _0 bool undefined name function name() external view returns (string) See {IERC721Metadata-name}. Returns Name Type Description _0 string undefined ownerOf function ownerOf(uint256 tokenId) external view returns (address) See {IERC721-ownerOf}. Parameters Name Type Description tokenId uint256 undefined Returns Name Type Description _0 address undefined safeTransferFrom function safeTransferFrom(address from, address to, uint256 tokenId) external nonpayable See {IERC721-safeTransferFrom}. Parameters Name Type Description from address undefined to address undefined tokenId uint256 undefined safeTransferFrom function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) external nonpayable See {IERC721-safeTransferFrom}. Parameters Name Type Description from address undefined to address undefined tokenId uint256 undefined data bytes undefined setApprovalForAll function setApprovalForAll(address operator, bool approved) external nonpayable See {IERC721-setApprovalForAll}. Parameters Name Type Description operator address undefined approved bool undefined supportsInterface function supportsInterface(bytes4 interfaceId) external view returns (bool) See {IERC165-supportsInterface}. Parameters Name Type Description interfaceId bytes4 undefined Returns Name Type Description _0 bool undefined symbol function symbol() external view returns (string) See {IERC721Metadata-symbol}. Returns Name Type Description _0 string undefined tokenURI function tokenURI(uint256 tokenId) external view returns (string) See {IERC721Metadata-tokenURI}. Parameters Name Type Description tokenId uint256 undefined Returns Name Type Description _0 string undefined transferFrom function transferFrom(address from, address to, uint256 tokenId) external nonpayable See {IERC721-transferFrom}. Parameters Name Type Description from address undefined to address undefined tokenId uint256 undefined Events Approval event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId) Emitted when owner enables approved to manage the tokenId token. Parameters Name Type Description owner indexed address undefined approved indexed address undefined tokenId indexed uint256 undefined ApprovalForAll event ApprovalForAll(address indexed owner, address indexed operator, bool approved) Emitted when owner enables or disables ( approved ) operator to manage all of its assets. Parameters Name Type Description owner indexed address undefined operator indexed address undefined approved bool undefined Transfer event Transfer(address indexed from, address indexed to, uint256 indexed tokenId) Emitted when tokenId token is transferred from from to to . Parameters Name Type Description from indexed address undefined to indexed address undefined tokenId indexed uint256 undefined Errors ERC721IncorrectOwner error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner) Indicates an error related to the ownership over a particular token. Used in transfers. Parameters Name Type Description sender address Address whose tokens are being transferred. tokenId uint256 Identifier number of a token. owner address Address of the current owner of a token. ERC721InsufficientApproval error ERC721InsufficientApproval(address operator, uint256 tokenId) Indicates a failure with the operator \u2019s approval. Used in transfers. Parameters Name Type Description operator address Address that may be allowed to operate on tokens without being their owner. tokenId uint256 Identifier number of a token. ERC721InvalidApprover error ERC721InvalidApprover(address approver) Indicates a failure with the approver of a token to be approved. Used in approvals. Parameters Name Type Description approver address Address initiating an approval operation. ERC721InvalidOperator error ERC721InvalidOperator(address operator) Indicates a failure with the operator to be approved. Used in approvals. Parameters Name Type Description operator address Address that may be allowed to operate on tokens without being their owner. ERC721InvalidOwner error ERC721InvalidOwner(address owner) Indicates that an address can't be an owner. For example, address(0) is a forbidden owner in EIP-20. Used in balance queries. Parameters Name Type Description owner address Address of the current owner of a token. ERC721InvalidReceiver error ERC721InvalidReceiver(address receiver) Indicates a failure with the token receiver . Used in transfers. Parameters Name Type Description receiver address Address to which tokens are being transferred. ERC721InvalidSender error ERC721InvalidSender(address sender) Indicates a failure with the token sender . Used in transfers. Parameters Name Type Description sender address Address whose tokens are being transferred. ERC721NonexistentToken error ERC721NonexistentToken(uint256 tokenId) Indicates a tokenId whose owner is the zero address. Parameters Name Type Description tokenId uint256 Identifier number of a token.","title":"ERC721"},{"location":"elin/contracts/token/ERC721/ERC721/#erc721","text":"Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including the Metadata extension, but not including the Enumerable extension, which is available separately as {ERC721Enumerable}.","title":"ERC721"},{"location":"elin/contracts/token/ERC721/ERC721/#methods","text":"","title":"Methods"},{"location":"elin/contracts/token/ERC721/ERC721/#approve","text":"function approve(address to, uint256 tokenId) external nonpayable See {IERC721-approve}.","title":"approve"},{"location":"elin/contracts/token/ERC721/ERC721/#parameters","text":"Name Type Description to address undefined tokenId uint256 undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/ERC721/#balanceof","text":"function balanceOf(address owner) external view returns (uint256) See {IERC721-balanceOf}.","title":"balanceOf"},{"location":"elin/contracts/token/ERC721/ERC721/#parameters_1","text":"Name Type Description owner address undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/ERC721/#returns","text":"Name Type Description _0 uint256 undefined","title":"Returns"},{"location":"elin/contracts/token/ERC721/ERC721/#getapproved","text":"function getApproved(uint256 tokenId) external view returns (address) See {IERC721-getApproved}.","title":"getApproved"},{"location":"elin/contracts/token/ERC721/ERC721/#parameters_2","text":"Name Type Description tokenId uint256 undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/ERC721/#returns_1","text":"Name Type Description _0 address undefined","title":"Returns"},{"location":"elin/contracts/token/ERC721/ERC721/#isapprovedforall","text":"function isApprovedForAll(address owner, address operator) external view returns (bool) See {IERC721-isApprovedForAll}.","title":"isApprovedForAll"},{"location":"elin/contracts/token/ERC721/ERC721/#parameters_3","text":"Name Type Description owner address undefined operator address undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/ERC721/#returns_2","text":"Name Type Description _0 bool undefined","title":"Returns"},{"location":"elin/contracts/token/ERC721/ERC721/#name","text":"function name() external view returns (string) See {IERC721Metadata-name}.","title":"name"},{"location":"elin/contracts/token/ERC721/ERC721/#returns_3","text":"Name Type Description _0 string undefined","title":"Returns"},{"location":"elin/contracts/token/ERC721/ERC721/#ownerof","text":"function ownerOf(uint256 tokenId) external view returns (address) See {IERC721-ownerOf}.","title":"ownerOf"},{"location":"elin/contracts/token/ERC721/ERC721/#parameters_4","text":"Name Type Description tokenId uint256 undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/ERC721/#returns_4","text":"Name Type Description _0 address undefined","title":"Returns"},{"location":"elin/contracts/token/ERC721/ERC721/#safetransferfrom","text":"function safeTransferFrom(address from, address to, uint256 tokenId) external nonpayable See {IERC721-safeTransferFrom}.","title":"safeTransferFrom"},{"location":"elin/contracts/token/ERC721/ERC721/#parameters_5","text":"Name Type Description from address undefined to address undefined tokenId uint256 undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/ERC721/#safetransferfrom_1","text":"function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) external nonpayable See {IERC721-safeTransferFrom}.","title":"safeTransferFrom"},{"location":"elin/contracts/token/ERC721/ERC721/#parameters_6","text":"Name Type Description from address undefined to address undefined tokenId uint256 undefined data bytes undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/ERC721/#setapprovalforall","text":"function setApprovalForAll(address operator, bool approved) external nonpayable See {IERC721-setApprovalForAll}.","title":"setApprovalForAll"},{"location":"elin/contracts/token/ERC721/ERC721/#parameters_7","text":"Name Type Description operator address undefined approved bool undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/ERC721/#supportsinterface","text":"function supportsInterface(bytes4 interfaceId) external view returns (bool) See {IERC165-supportsInterface}.","title":"supportsInterface"},{"location":"elin/contracts/token/ERC721/ERC721/#parameters_8","text":"Name Type Description interfaceId bytes4 undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/ERC721/#returns_5","text":"Name Type Description _0 bool undefined","title":"Returns"},{"location":"elin/contracts/token/ERC721/ERC721/#symbol","text":"function symbol() external view returns (string) See {IERC721Metadata-symbol}.","title":"symbol"},{"location":"elin/contracts/token/ERC721/ERC721/#returns_6","text":"Name Type Description _0 string undefined","title":"Returns"},{"location":"elin/contracts/token/ERC721/ERC721/#tokenuri","text":"function tokenURI(uint256 tokenId) external view returns (string) See {IERC721Metadata-tokenURI}.","title":"tokenURI"},{"location":"elin/contracts/token/ERC721/ERC721/#parameters_9","text":"Name Type Description tokenId uint256 undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/ERC721/#returns_7","text":"Name Type Description _0 string undefined","title":"Returns"},{"location":"elin/contracts/token/ERC721/ERC721/#transferfrom","text":"function transferFrom(address from, address to, uint256 tokenId) external nonpayable See {IERC721-transferFrom}.","title":"transferFrom"},{"location":"elin/contracts/token/ERC721/ERC721/#parameters_10","text":"Name Type Description from address undefined to address undefined tokenId uint256 undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/ERC721/#events","text":"","title":"Events"},{"location":"elin/contracts/token/ERC721/ERC721/#approval","text":"event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId) Emitted when owner enables approved to manage the tokenId token.","title":"Approval"},{"location":"elin/contracts/token/ERC721/ERC721/#parameters_11","text":"Name Type Description owner indexed address undefined approved indexed address undefined tokenId indexed uint256 undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/ERC721/#approvalforall","text":"event ApprovalForAll(address indexed owner, address indexed operator, bool approved) Emitted when owner enables or disables ( approved ) operator to manage all of its assets.","title":"ApprovalForAll"},{"location":"elin/contracts/token/ERC721/ERC721/#parameters_12","text":"Name Type Description owner indexed address undefined operator indexed address undefined approved bool undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/ERC721/#transfer","text":"event Transfer(address indexed from, address indexed to, uint256 indexed tokenId) Emitted when tokenId token is transferred from from to to .","title":"Transfer"},{"location":"elin/contracts/token/ERC721/ERC721/#parameters_13","text":"Name Type Description from indexed address undefined to indexed address undefined tokenId indexed uint256 undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/ERC721/#errors","text":"","title":"Errors"},{"location":"elin/contracts/token/ERC721/ERC721/#erc721incorrectowner","text":"error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner) Indicates an error related to the ownership over a particular token. Used in transfers.","title":"ERC721IncorrectOwner"},{"location":"elin/contracts/token/ERC721/ERC721/#parameters_14","text":"Name Type Description sender address Address whose tokens are being transferred. tokenId uint256 Identifier number of a token. owner address Address of the current owner of a token.","title":"Parameters"},{"location":"elin/contracts/token/ERC721/ERC721/#erc721insufficientapproval","text":"error ERC721InsufficientApproval(address operator, uint256 tokenId) Indicates a failure with the operator \u2019s approval. Used in transfers.","title":"ERC721InsufficientApproval"},{"location":"elin/contracts/token/ERC721/ERC721/#parameters_15","text":"Name Type Description operator address Address that may be allowed to operate on tokens without being their owner. tokenId uint256 Identifier number of a token.","title":"Parameters"},{"location":"elin/contracts/token/ERC721/ERC721/#erc721invalidapprover","text":"error ERC721InvalidApprover(address approver) Indicates a failure with the approver of a token to be approved. Used in approvals.","title":"ERC721InvalidApprover"},{"location":"elin/contracts/token/ERC721/ERC721/#parameters_16","text":"Name Type Description approver address Address initiating an approval operation.","title":"Parameters"},{"location":"elin/contracts/token/ERC721/ERC721/#erc721invalidoperator","text":"error ERC721InvalidOperator(address operator) Indicates a failure with the operator to be approved. Used in approvals.","title":"ERC721InvalidOperator"},{"location":"elin/contracts/token/ERC721/ERC721/#parameters_17","text":"Name Type Description operator address Address that may be allowed to operate on tokens without being their owner.","title":"Parameters"},{"location":"elin/contracts/token/ERC721/ERC721/#erc721invalidowner","text":"error ERC721InvalidOwner(address owner) Indicates that an address can't be an owner. For example, address(0) is a forbidden owner in EIP-20. Used in balance queries.","title":"ERC721InvalidOwner"},{"location":"elin/contracts/token/ERC721/ERC721/#parameters_18","text":"Name Type Description owner address Address of the current owner of a token.","title":"Parameters"},{"location":"elin/contracts/token/ERC721/ERC721/#erc721invalidreceiver","text":"error ERC721InvalidReceiver(address receiver) Indicates a failure with the token receiver . Used in transfers.","title":"ERC721InvalidReceiver"},{"location":"elin/contracts/token/ERC721/ERC721/#parameters_19","text":"Name Type Description receiver address Address to which tokens are being transferred.","title":"Parameters"},{"location":"elin/contracts/token/ERC721/ERC721/#erc721invalidsender","text":"error ERC721InvalidSender(address sender) Indicates a failure with the token sender . Used in transfers.","title":"ERC721InvalidSender"},{"location":"elin/contracts/token/ERC721/ERC721/#parameters_20","text":"Name Type Description sender address Address whose tokens are being transferred.","title":"Parameters"},{"location":"elin/contracts/token/ERC721/ERC721/#erc721nonexistenttoken","text":"error ERC721NonexistentToken(uint256 tokenId) Indicates a tokenId whose owner is the zero address.","title":"ERC721NonexistentToken"},{"location":"elin/contracts/token/ERC721/ERC721/#parameters_21","text":"Name Type Description tokenId uint256 Identifier number of a token.","title":"Parameters"},{"location":"elin/contracts/token/ERC721/IERC721/","text":"IERC721 Required interface of an ERC721 compliant contract. Methods approve function approve(address to, uint256 tokenId) external nonpayable Gives permission to to to transfer tokenId token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - tokenId must exist. Emits an {Approval} event. Parameters Name Type Description to address undefined tokenId uint256 undefined balanceOf function balanceOf(address owner) external view returns (uint256 balance) Returns the number of tokens in owner 's account. Parameters Name Type Description owner address undefined Returns Name Type Description balance uint256 undefined getApproved function getApproved(uint256 tokenId) external view returns (address operator) Returns the account approved for tokenId token. Requirements: - tokenId must exist. Parameters Name Type Description tokenId uint256 undefined Returns Name Type Description operator address undefined isApprovedForAll function isApprovedForAll(address owner, address operator) external view returns (bool) Returns if the operator is allowed to manage all of the assets of owner . See {setApprovalForAll} Parameters Name Type Description owner address undefined operator address undefined Returns Name Type Description _0 bool undefined ownerOf function ownerOf(uint256 tokenId) external view returns (address owner) Returns the owner of the tokenId token. Requirements: - tokenId must exist. Parameters Name Type Description tokenId uint256 undefined Returns Name Type Description owner address undefined safeTransferFrom function safeTransferFrom(address from, address to, uint256 tokenId) external nonpayable Safely transfers tokenId token from from to to , checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - from cannot be the zero address. - to cannot be the zero address. - tokenId token must exist and be owned by from . - If the caller is not from , it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If to refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event. Parameters Name Type Description from address undefined to address undefined tokenId uint256 undefined safeTransferFrom function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) external nonpayable Safely transfers tokenId token from from to to . Requirements: - from cannot be the zero address. - to cannot be the zero address. - tokenId token must exist and be owned by from . - If the caller is not from , it must be approved to move this token by either {approve} or {setApprovalForAll}. - If to refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event. Parameters Name Type Description from address undefined to address undefined tokenId uint256 undefined data bytes undefined setApprovalForAll function setApprovalForAll(address operator, bool approved) external nonpayable Approve or remove operator as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The operator cannot be the address zero. Emits an {ApprovalForAll} event. Parameters Name Type Description operator address undefined approved bool undefined supportsInterface function supportsInterface(bytes4 interfaceId) external view returns (bool) Returns true if this contract implements the interface defined by interfaceId . See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas. Parameters Name Type Description interfaceId bytes4 undefined Returns Name Type Description _0 bool undefined transferFrom function transferFrom(address from, address to, uint256 tokenId) external nonpayable Transfers tokenId token from from to to . WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - from cannot be the zero address. - to cannot be the zero address. - tokenId token must be owned by from . - If the caller is not from , it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event. Parameters Name Type Description from address undefined to address undefined tokenId uint256 undefined Events Approval event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId) Emitted when owner enables approved to manage the tokenId token. Parameters Name Type Description owner indexed address undefined approved indexed address undefined tokenId indexed uint256 undefined ApprovalForAll event ApprovalForAll(address indexed owner, address indexed operator, bool approved) Emitted when owner enables or disables ( approved ) operator to manage all of its assets. Parameters Name Type Description owner indexed address undefined operator indexed address undefined approved bool undefined Transfer event Transfer(address indexed from, address indexed to, uint256 indexed tokenId) Emitted when tokenId token is transferred from from to to . Parameters Name Type Description from indexed address undefined to indexed address undefined tokenId indexed uint256 undefined","title":"IERC721"},{"location":"elin/contracts/token/ERC721/IERC721/#ierc721","text":"Required interface of an ERC721 compliant contract.","title":"IERC721"},{"location":"elin/contracts/token/ERC721/IERC721/#methods","text":"","title":"Methods"},{"location":"elin/contracts/token/ERC721/IERC721/#approve","text":"function approve(address to, uint256 tokenId) external nonpayable Gives permission to to to transfer tokenId token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - tokenId must exist. Emits an {Approval} event.","title":"approve"},{"location":"elin/contracts/token/ERC721/IERC721/#parameters","text":"Name Type Description to address undefined tokenId uint256 undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/IERC721/#balanceof","text":"function balanceOf(address owner) external view returns (uint256 balance) Returns the number of tokens in owner 's account.","title":"balanceOf"},{"location":"elin/contracts/token/ERC721/IERC721/#parameters_1","text":"Name Type Description owner address undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/IERC721/#returns","text":"Name Type Description balance uint256 undefined","title":"Returns"},{"location":"elin/contracts/token/ERC721/IERC721/#getapproved","text":"function getApproved(uint256 tokenId) external view returns (address operator) Returns the account approved for tokenId token. Requirements: - tokenId must exist.","title":"getApproved"},{"location":"elin/contracts/token/ERC721/IERC721/#parameters_2","text":"Name Type Description tokenId uint256 undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/IERC721/#returns_1","text":"Name Type Description operator address undefined","title":"Returns"},{"location":"elin/contracts/token/ERC721/IERC721/#isapprovedforall","text":"function isApprovedForAll(address owner, address operator) external view returns (bool) Returns if the operator is allowed to manage all of the assets of owner . See {setApprovalForAll}","title":"isApprovedForAll"},{"location":"elin/contracts/token/ERC721/IERC721/#parameters_3","text":"Name Type Description owner address undefined operator address undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/IERC721/#returns_2","text":"Name Type Description _0 bool undefined","title":"Returns"},{"location":"elin/contracts/token/ERC721/IERC721/#ownerof","text":"function ownerOf(uint256 tokenId) external view returns (address owner) Returns the owner of the tokenId token. Requirements: - tokenId must exist.","title":"ownerOf"},{"location":"elin/contracts/token/ERC721/IERC721/#parameters_4","text":"Name Type Description tokenId uint256 undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/IERC721/#returns_3","text":"Name Type Description owner address undefined","title":"Returns"},{"location":"elin/contracts/token/ERC721/IERC721/#safetransferfrom","text":"function safeTransferFrom(address from, address to, uint256 tokenId) external nonpayable Safely transfers tokenId token from from to to , checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - from cannot be the zero address. - to cannot be the zero address. - tokenId token must exist and be owned by from . - If the caller is not from , it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If to refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.","title":"safeTransferFrom"},{"location":"elin/contracts/token/ERC721/IERC721/#parameters_5","text":"Name Type Description from address undefined to address undefined tokenId uint256 undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/IERC721/#safetransferfrom_1","text":"function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) external nonpayable Safely transfers tokenId token from from to to . Requirements: - from cannot be the zero address. - to cannot be the zero address. - tokenId token must exist and be owned by from . - If the caller is not from , it must be approved to move this token by either {approve} or {setApprovalForAll}. - If to refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.","title":"safeTransferFrom"},{"location":"elin/contracts/token/ERC721/IERC721/#parameters_6","text":"Name Type Description from address undefined to address undefined tokenId uint256 undefined data bytes undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/IERC721/#setapprovalforall","text":"function setApprovalForAll(address operator, bool approved) external nonpayable Approve or remove operator as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The operator cannot be the address zero. Emits an {ApprovalForAll} event.","title":"setApprovalForAll"},{"location":"elin/contracts/token/ERC721/IERC721/#parameters_7","text":"Name Type Description operator address undefined approved bool undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/IERC721/#supportsinterface","text":"function supportsInterface(bytes4 interfaceId) external view returns (bool) Returns true if this contract implements the interface defined by interfaceId . See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.","title":"supportsInterface"},{"location":"elin/contracts/token/ERC721/IERC721/#parameters_8","text":"Name Type Description interfaceId bytes4 undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/IERC721/#returns_4","text":"Name Type Description _0 bool undefined","title":"Returns"},{"location":"elin/contracts/token/ERC721/IERC721/#transferfrom","text":"function transferFrom(address from, address to, uint256 tokenId) external nonpayable Transfers tokenId token from from to to . WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - from cannot be the zero address. - to cannot be the zero address. - tokenId token must be owned by from . - If the caller is not from , it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.","title":"transferFrom"},{"location":"elin/contracts/token/ERC721/IERC721/#parameters_9","text":"Name Type Description from address undefined to address undefined tokenId uint256 undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/IERC721/#events","text":"","title":"Events"},{"location":"elin/contracts/token/ERC721/IERC721/#approval","text":"event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId) Emitted when owner enables approved to manage the tokenId token.","title":"Approval"},{"location":"elin/contracts/token/ERC721/IERC721/#parameters_10","text":"Name Type Description owner indexed address undefined approved indexed address undefined tokenId indexed uint256 undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/IERC721/#approvalforall","text":"event ApprovalForAll(address indexed owner, address indexed operator, bool approved) Emitted when owner enables or disables ( approved ) operator to manage all of its assets.","title":"ApprovalForAll"},{"location":"elin/contracts/token/ERC721/IERC721/#parameters_11","text":"Name Type Description owner indexed address undefined operator indexed address undefined approved bool undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/IERC721/#transfer","text":"event Transfer(address indexed from, address indexed to, uint256 indexed tokenId) Emitted when tokenId token is transferred from from to to .","title":"Transfer"},{"location":"elin/contracts/token/ERC721/IERC721/#parameters_12","text":"Name Type Description from indexed address undefined to indexed address undefined tokenId indexed uint256 undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/IERC721Receiver/","text":"IERC721Receiver ERC721 token receiver interface Interface for any contract that wants to support safeTransfers from ERC721 asset contracts. Methods onERC721Received function onERC721Received(address operator, address from, uint256 tokenId, bytes data) external nonpayable returns (bytes4) Whenever an {IERC721} tokenId token is transferred to this contract via {IERC721-safeTransferFrom} by operator from from , this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with IERC721Receiver.onERC721Received.selector . Parameters Name Type Description operator address undefined from address undefined tokenId uint256 undefined data bytes undefined Returns Name Type Description _0 bytes4 undefined","title":"IERC721Receiver"},{"location":"elin/contracts/token/ERC721/IERC721Receiver/#ierc721receiver","text":"ERC721 token receiver interface Interface for any contract that wants to support safeTransfers from ERC721 asset contracts.","title":"IERC721Receiver"},{"location":"elin/contracts/token/ERC721/IERC721Receiver/#methods","text":"","title":"Methods"},{"location":"elin/contracts/token/ERC721/IERC721Receiver/#onerc721received","text":"function onERC721Received(address operator, address from, uint256 tokenId, bytes data) external nonpayable returns (bytes4) Whenever an {IERC721} tokenId token is transferred to this contract via {IERC721-safeTransferFrom} by operator from from , this function is called. It must return its Solidity selector to confirm the token transfer. If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted. The selector can be obtained in Solidity with IERC721Receiver.onERC721Received.selector .","title":"onERC721Received"},{"location":"elin/contracts/token/ERC721/IERC721Receiver/#parameters","text":"Name Type Description operator address undefined from address undefined tokenId uint256 undefined data bytes undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/IERC721Receiver/#returns","text":"Name Type Description _0 bytes4 undefined","title":"Returns"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/","text":"IERC721Metadata ERC-721 Non-Fungible Token Standard, optional metadata extension See https://eips.ethereum.org/EIPS/eip-721 Methods approve function approve(address to, uint256 tokenId) external nonpayable Gives permission to to to transfer tokenId token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - tokenId must exist. Emits an {Approval} event. Parameters Name Type Description to address undefined tokenId uint256 undefined balanceOf function balanceOf(address owner) external view returns (uint256 balance) Returns the number of tokens in owner 's account. Parameters Name Type Description owner address undefined Returns Name Type Description balance uint256 undefined getApproved function getApproved(uint256 tokenId) external view returns (address operator) Returns the account approved for tokenId token. Requirements: - tokenId must exist. Parameters Name Type Description tokenId uint256 undefined Returns Name Type Description operator address undefined isApprovedForAll function isApprovedForAll(address owner, address operator) external view returns (bool) Returns if the operator is allowed to manage all of the assets of owner . See {setApprovalForAll} Parameters Name Type Description owner address undefined operator address undefined Returns Name Type Description _0 bool undefined name function name() external view returns (string) Returns the token collection name. Returns Name Type Description _0 string undefined ownerOf function ownerOf(uint256 tokenId) external view returns (address owner) Returns the owner of the tokenId token. Requirements: - tokenId must exist. Parameters Name Type Description tokenId uint256 undefined Returns Name Type Description owner address undefined safeTransferFrom function safeTransferFrom(address from, address to, uint256 tokenId) external nonpayable Safely transfers tokenId token from from to to , checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - from cannot be the zero address. - to cannot be the zero address. - tokenId token must exist and be owned by from . - If the caller is not from , it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If to refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event. Parameters Name Type Description from address undefined to address undefined tokenId uint256 undefined safeTransferFrom function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) external nonpayable Safely transfers tokenId token from from to to . Requirements: - from cannot be the zero address. - to cannot be the zero address. - tokenId token must exist and be owned by from . - If the caller is not from , it must be approved to move this token by either {approve} or {setApprovalForAll}. - If to refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event. Parameters Name Type Description from address undefined to address undefined tokenId uint256 undefined data bytes undefined setApprovalForAll function setApprovalForAll(address operator, bool approved) external nonpayable Approve or remove operator as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The operator cannot be the address zero. Emits an {ApprovalForAll} event. Parameters Name Type Description operator address undefined approved bool undefined supportsInterface function supportsInterface(bytes4 interfaceId) external view returns (bool) Returns true if this contract implements the interface defined by interfaceId . See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas. Parameters Name Type Description interfaceId bytes4 undefined Returns Name Type Description _0 bool undefined symbol function symbol() external view returns (string) Returns the token collection symbol. Returns Name Type Description _0 string undefined tokenURI function tokenURI(uint256 tokenId) external view returns (string) Returns the Uniform Resource Identifier (URI) for tokenId token. Parameters Name Type Description tokenId uint256 undefined Returns Name Type Description _0 string undefined transferFrom function transferFrom(address from, address to, uint256 tokenId) external nonpayable Transfers tokenId token from from to to . WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - from cannot be the zero address. - to cannot be the zero address. - tokenId token must be owned by from . - If the caller is not from , it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event. Parameters Name Type Description from address undefined to address undefined tokenId uint256 undefined Events Approval event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId) Emitted when owner enables approved to manage the tokenId token. Parameters Name Type Description owner indexed address undefined approved indexed address undefined tokenId indexed uint256 undefined ApprovalForAll event ApprovalForAll(address indexed owner, address indexed operator, bool approved) Emitted when owner enables or disables ( approved ) operator to manage all of its assets. Parameters Name Type Description owner indexed address undefined operator indexed address undefined approved bool undefined Transfer event Transfer(address indexed from, address indexed to, uint256 indexed tokenId) Emitted when tokenId token is transferred from from to to . Parameters Name Type Description from indexed address undefined to indexed address undefined tokenId indexed uint256 undefined","title":"IERC721Metadata"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#ierc721metadata","text":"ERC-721 Non-Fungible Token Standard, optional metadata extension See https://eips.ethereum.org/EIPS/eip-721","title":"IERC721Metadata"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#methods","text":"","title":"Methods"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#approve","text":"function approve(address to, uint256 tokenId) external nonpayable Gives permission to to to transfer tokenId token to another account. The approval is cleared when the token is transferred. Only a single account can be approved at a time, so approving the zero address clears previous approvals. Requirements: - The caller must own the token or be an approved operator. - tokenId must exist. Emits an {Approval} event.","title":"approve"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#parameters","text":"Name Type Description to address undefined tokenId uint256 undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#balanceof","text":"function balanceOf(address owner) external view returns (uint256 balance) Returns the number of tokens in owner 's account.","title":"balanceOf"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#parameters_1","text":"Name Type Description owner address undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#returns","text":"Name Type Description balance uint256 undefined","title":"Returns"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#getapproved","text":"function getApproved(uint256 tokenId) external view returns (address operator) Returns the account approved for tokenId token. Requirements: - tokenId must exist.","title":"getApproved"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#parameters_2","text":"Name Type Description tokenId uint256 undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#returns_1","text":"Name Type Description operator address undefined","title":"Returns"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#isapprovedforall","text":"function isApprovedForAll(address owner, address operator) external view returns (bool) Returns if the operator is allowed to manage all of the assets of owner . See {setApprovalForAll}","title":"isApprovedForAll"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#parameters_3","text":"Name Type Description owner address undefined operator address undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#returns_2","text":"Name Type Description _0 bool undefined","title":"Returns"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#name","text":"function name() external view returns (string) Returns the token collection name.","title":"name"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#returns_3","text":"Name Type Description _0 string undefined","title":"Returns"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#ownerof","text":"function ownerOf(uint256 tokenId) external view returns (address owner) Returns the owner of the tokenId token. Requirements: - tokenId must exist.","title":"ownerOf"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#parameters_4","text":"Name Type Description tokenId uint256 undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#returns_4","text":"Name Type Description owner address undefined","title":"Returns"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#safetransferfrom","text":"function safeTransferFrom(address from, address to, uint256 tokenId) external nonpayable Safely transfers tokenId token from from to to , checking first that contract recipients are aware of the ERC721 protocol to prevent tokens from being forever locked. Requirements: - from cannot be the zero address. - to cannot be the zero address. - tokenId token must exist and be owned by from . - If the caller is not from , it must have been allowed to move this token by either {approve} or {setApprovalForAll}. - If to refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.","title":"safeTransferFrom"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#parameters_5","text":"Name Type Description from address undefined to address undefined tokenId uint256 undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#safetransferfrom_1","text":"function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) external nonpayable Safely transfers tokenId token from from to to . Requirements: - from cannot be the zero address. - to cannot be the zero address. - tokenId token must exist and be owned by from . - If the caller is not from , it must be approved to move this token by either {approve} or {setApprovalForAll}. - If to refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer. Emits a {Transfer} event.","title":"safeTransferFrom"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#parameters_6","text":"Name Type Description from address undefined to address undefined tokenId uint256 undefined data bytes undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#setapprovalforall","text":"function setApprovalForAll(address operator, bool approved) external nonpayable Approve or remove operator as an operator for the caller. Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller. Requirements: - The operator cannot be the address zero. Emits an {ApprovalForAll} event.","title":"setApprovalForAll"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#parameters_7","text":"Name Type Description operator address undefined approved bool undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#supportsinterface","text":"function supportsInterface(bytes4 interfaceId) external view returns (bool) Returns true if this contract implements the interface defined by interfaceId . See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.","title":"supportsInterface"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#parameters_8","text":"Name Type Description interfaceId bytes4 undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#returns_5","text":"Name Type Description _0 bool undefined","title":"Returns"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#symbol","text":"function symbol() external view returns (string) Returns the token collection symbol.","title":"symbol"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#returns_6","text":"Name Type Description _0 string undefined","title":"Returns"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#tokenuri","text":"function tokenURI(uint256 tokenId) external view returns (string) Returns the Uniform Resource Identifier (URI) for tokenId token.","title":"tokenURI"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#parameters_9","text":"Name Type Description tokenId uint256 undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#returns_7","text":"Name Type Description _0 string undefined","title":"Returns"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#transferfrom","text":"function transferFrom(address from, address to, uint256 tokenId) external nonpayable Transfers tokenId token from from to to . WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721 or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must understand this adds an external call which potentially creates a reentrancy vulnerability. Requirements: - from cannot be the zero address. - to cannot be the zero address. - tokenId token must be owned by from . - If the caller is not from , it must be approved to move this token by either {approve} or {setApprovalForAll}. Emits a {Transfer} event.","title":"transferFrom"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#parameters_10","text":"Name Type Description from address undefined to address undefined tokenId uint256 undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#events","text":"","title":"Events"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#approval","text":"event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId) Emitted when owner enables approved to manage the tokenId token.","title":"Approval"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#parameters_11","text":"Name Type Description owner indexed address undefined approved indexed address undefined tokenId indexed uint256 undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#approvalforall","text":"event ApprovalForAll(address indexed owner, address indexed operator, bool approved) Emitted when owner enables or disables ( approved ) operator to manage all of its assets.","title":"ApprovalForAll"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#parameters_12","text":"Name Type Description owner indexed address undefined operator indexed address undefined approved bool undefined","title":"Parameters"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#transfer","text":"event Transfer(address indexed from, address indexed to, uint256 indexed tokenId) Emitted when tokenId token is transferred from from to to .","title":"Transfer"},{"location":"elin/contracts/token/ERC721/extensions/IERC721Metadata/#parameters_13","text":"Name Type Description from indexed address undefined to indexed address undefined tokenId indexed uint256 undefined","title":"Parameters"},{"location":"elin/contracts/utils/Context/","text":"Context Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","title":"Context"},{"location":"elin/contracts/utils/Context/#context","text":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","title":"Context"},{"location":"elin/contracts/utils/Strings/","text":"Strings String operations. Errors StringsInsufficientHexLength error StringsInsufficientHexLength(uint256 value, uint256 length) The value string doesn't fit in the specified length . Parameters Name Type Description value uint256 undefined length uint256 undefined","title":"Strings"},{"location":"elin/contracts/utils/Strings/#strings","text":"String operations.","title":"Strings"},{"location":"elin/contracts/utils/Strings/#errors","text":"","title":"Errors"},{"location":"elin/contracts/utils/Strings/#stringsinsufficienthexlength","text":"error StringsInsufficientHexLength(uint256 value, uint256 length) The value string doesn't fit in the specified length .","title":"StringsInsufficientHexLength"},{"location":"elin/contracts/utils/Strings/#parameters","text":"Name Type Description value uint256 undefined length uint256 undefined","title":"Parameters"},{"location":"elin/contracts/utils/introspection/ERC165/","text":"ERC165 Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) { return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); } Methods supportsInterface function supportsInterface(bytes4 interfaceId) external view returns (bool) See {IERC165-supportsInterface}. Parameters Name Type Description interfaceId bytes4 undefined Returns Name Type Description _0 bool undefined","title":"ERC165"},{"location":"elin/contracts/utils/introspection/ERC165/#erc165","text":"Implementation of the {IERC165} interface. Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check for the additional interface id that will be supported. For example: solidity function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) { return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId); }","title":"ERC165"},{"location":"elin/contracts/utils/introspection/ERC165/#methods","text":"","title":"Methods"},{"location":"elin/contracts/utils/introspection/ERC165/#supportsinterface","text":"function supportsInterface(bytes4 interfaceId) external view returns (bool) See {IERC165-supportsInterface}.","title":"supportsInterface"},{"location":"elin/contracts/utils/introspection/ERC165/#parameters","text":"Name Type Description interfaceId bytes4 undefined","title":"Parameters"},{"location":"elin/contracts/utils/introspection/ERC165/#returns","text":"Name Type Description _0 bool undefined","title":"Returns"},{"location":"elin/contracts/utils/introspection/IERC165/","text":"IERC165 Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}. Methods supportsInterface function supportsInterface(bytes4 interfaceId) external view returns (bool) Returns true if this contract implements the interface defined by interfaceId . See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas. Parameters Name Type Description interfaceId bytes4 undefined Returns Name Type Description _0 bool undefined","title":"IERC165"},{"location":"elin/contracts/utils/introspection/IERC165/#ierc165","text":"Interface of the ERC165 standard, as defined in the https://eips.ethereum.org/EIPS/eip-165[EIP]. Implementers can declare support of contract interfaces, which can then be queried by others ({ERC165Checker}). For an implementation, see {ERC165}.","title":"IERC165"},{"location":"elin/contracts/utils/introspection/IERC165/#methods","text":"","title":"Methods"},{"location":"elin/contracts/utils/introspection/IERC165/#supportsinterface","text":"function supportsInterface(bytes4 interfaceId) external view returns (bool) Returns true if this contract implements the interface defined by interfaceId . See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas.","title":"supportsInterface"},{"location":"elin/contracts/utils/introspection/IERC165/#parameters","text":"Name Type Description interfaceId bytes4 undefined","title":"Parameters"},{"location":"elin/contracts/utils/introspection/IERC165/#returns","text":"Name Type Description _0 bool undefined","title":"Returns"},{"location":"elin/contracts/utils/math/Math/","text":"Math Standard math utilities missing in the Solidity language. Errors MathOverflowedMulDiv error MathOverflowedMulDiv() Muldiv operation overflow.","title":"Math"},{"location":"elin/contracts/utils/math/Math/#math","text":"Standard math utilities missing in the Solidity language.","title":"Math"},{"location":"elin/contracts/utils/math/Math/#errors","text":"","title":"Errors"},{"location":"elin/contracts/utils/math/Math/#mathoverflowedmuldiv","text":"error MathOverflowedMulDiv() Muldiv operation overflow.","title":"MathOverflowedMulDiv"},{"location":"elin/contracts/utils/math/SignedMath/","text":"SignedMath Standard signed math utilities missing in the Solidity language.","title":"SignedMath"},{"location":"elin/contracts/utils/math/SignedMath/#signedmath","text":"Standard signed math utilities missing in the Solidity language.","title":"SignedMath"},{"location":"l/Base64/","text":"Base64 Brecht Devos - <brecht@loopring.org> Base64 Provides functions for encoding/decoding base64","title":"Base64"},{"location":"l/Base64/#base64","text":"Brecht Devos - <brecht@loopring.org> Base64 Provides functions for encoding/decoding base64","title":"Base64"},{"location":"libs/AssetBuilder/","text":"AssetBuilder 0xstabby.eth AssetBuilder Lib for building on-chain images","title":"AssetBuilder"},{"location":"libs/AssetBuilder/#assetbuilder","text":"0xstabby.eth AssetBuilder Lib for building on-chain images","title":"AssetBuilder"},{"location":"libs/Base64Encoder/","text":"Base64Encoder 0xstabby.eth Base64Encoder Lib for base64 encoding and prefixing","title":"Base64Encoder"},{"location":"libs/Base64Encoder/#base64encoder","text":"0xstabby.eth Base64Encoder Lib for base64 encoding and prefixing","title":"Base64Encoder"},{"location":"libs/Constants/","text":"Constants 0xstabby.eth Constants Lib for constants needed in base64 prefixing and SVG building","title":"Constants"},{"location":"libs/Constants/#constants","text":"0xstabby.eth Constants Lib for constants needed in base64 prefixing and SVG building","title":"Constants"},{"location":"libs/MetadataBuilder/","text":"MetadataBuilder 0xstabby.eth MetadataBuilder Lib for building on-chain metadata","title":"MetadataBuilder"},{"location":"libs/MetadataBuilder/#metadatabuilder","text":"0xstabby.eth MetadataBuilder Lib for building on-chain metadata","title":"MetadataBuilder"},{"location":"libs/OnChainDataStructs/","text":"OnChainDataStructs 0xstabby.eth OnChainDataStructs Shared structs for OnChainTraits","title":"OnChainDataStructs"},{"location":"libs/OnChainDataStructs/#onchaindatastructs","text":"0xstabby.eth OnChainDataStructs Shared structs for OnChainTraits","title":"OnChainDataStructs"},{"location":"libs/Random/","text":"Random 0xstabby.eth Random Libs for (sudo)random number generation","title":"Random"},{"location":"libs/Random/#random","text":"0xstabby.eth Random Libs for (sudo)random number generation","title":"Random"},{"location":"reference/ERC721oc/","text":"ERC721oc 0xstabby.eth ERC721oc ERC721 OnChainTraits implementation Methods _name function _name() external view returns (string) Returns Name Type Description _0 string undefined _symbol function _symbol() external view returns (string) Returns Name Type Description _0 string undefined approve function approve(address to, uint256 tokenId) external nonpayable See {IERC721-approve}. Parameters Name Type Description to address undefined tokenId uint256 undefined balanceOf function balanceOf(address owner) external view returns (uint256) See {IERC721-balanceOf}. Parameters Name Type Description owner address undefined Returns Name Type Description _0 uint256 undefined description function description() external view returns (string) Returns Name Type Description _0 string undefined getApproved function getApproved(uint256 tokenId) external view returns (address) See {IERC721-getApproved}. Parameters Name Type Description tokenId uint256 undefined Returns Name Type Description _0 address undefined getImage function getImage(uint256 id) external view returns (string) Get image Can be overridden Parameters Name Type Description id uint256 To get image for Returns Name Type Description _0 string String of base64 encoded svg getMetadata function getMetadata(uint256 id) external view returns (string) Get metadata for id Can be overridden Parameters Name Type Description id uint256 To grab metadata for Returns Name Type Description _0 string String of base64 encoded metadata getTraits function getTraits(uint256 id) external view returns (struct OnChainDataStructs.Trait[]) Get traits for id Can be overridden Parameters Name Type Description id uint256 To grab traits for Returns Name Type Description _0 OnChainDataStructs.Trait[] Array of Traits isApprovedForAll function isApprovedForAll(address owner, address operator) external view returns (bool) See {IERC721-isApprovedForAll}. Parameters Name Type Description owner address undefined operator address undefined Returns Name Type Description _0 bool undefined name function name() external view returns (string) See {IERC721Metadata-name}. Returns Name Type Description _0 string undefined owner function owner() external view returns (address) Returns the address of the current owner. Returns Name Type Description _0 address undefined ownerOf function ownerOf(uint256 tokenId) external view returns (address) See {IERC721-ownerOf}. Parameters Name Type Description tokenId uint256 undefined Returns Name Type Description _0 address undefined renounceOwnership function renounceOwnership() external nonpayable Leaves the contract without owner. It will not be possible to call onlyOwner functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner. reveal function reveal(uint256 _seed) external payable Reveal function with seed Parameters Name Type Description _seed uint256 To initialize metadata with safeTransferFrom function safeTransferFrom(address from, address to, uint256 tokenId) external nonpayable See {IERC721-safeTransferFrom}. Parameters Name Type Description from address undefined to address undefined tokenId uint256 undefined safeTransferFrom function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) external nonpayable See {IERC721-safeTransferFrom}. Parameters Name Type Description from address undefined to address undefined tokenId uint256 undefined data bytes undefined seed function seed() external view returns (uint256) Returns Name Type Description _0 uint256 undefined setApprovalForAll function setApprovalForAll(address operator, bool approved) external nonpayable See {IERC721-setApprovalForAll}. Parameters Name Type Description operator address undefined approved bool undefined setTraits function setTraits(OnChainDataStructs.Trait[] traits) external payable Parameters Name Type Description traits OnChainDataStructs.Trait[] undefined supportsInterface function supportsInterface(bytes4 interfaceId) external view returns (bool) See {IERC165-supportsInterface}. Parameters Name Type Description interfaceId bytes4 undefined Returns Name Type Description _0 bool undefined symbol function symbol() external view returns (string) See {IERC721Metadata-symbol}. Returns Name Type Description _0 string undefined tokenURI function tokenURI(uint256 id) external view returns (string) TokenURI returns base64URI metadata with a base64URI image Parameters Name Type Description id uint256 Of ERC721 Returns Name Type Description _0 string undefined traitTypeCount function traitTypeCount() external view returns (uint256) Returns Name Type Description _0 uint256 undefined traitValueCount function traitValueCount() external view returns (uint256) Returns Name Type Description _0 uint256 undefined transferFrom function transferFrom(address from, address to, uint256 tokenId) external nonpayable See {IERC721-transferFrom}. Parameters Name Type Description from address undefined to address undefined tokenId uint256 undefined transferOwnership function transferOwnership(address newOwner) external nonpayable Transfers ownership of the contract to a new account ( newOwner ). Can only be called by the current owner. Parameters Name Type Description newOwner address undefined Events Approval event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId) Emitted when owner enables approved to manage the tokenId token. Parameters Name Type Description owner indexed address undefined approved indexed address undefined tokenId indexed uint256 undefined ApprovalForAll event ApprovalForAll(address indexed owner, address indexed operator, bool approved) Emitted when owner enables or disables ( approved ) operator to manage all of its assets. Parameters Name Type Description owner indexed address undefined operator indexed address undefined approved bool undefined OwnershipTransferred event OwnershipTransferred(address indexed previousOwner, address indexed newOwner) Parameters Name Type Description previousOwner indexed address undefined newOwner indexed address undefined Transfer event Transfer(address indexed from, address indexed to, uint256 indexed tokenId) Emitted when tokenId token is transferred from from to to . Parameters Name Type Description from indexed address undefined to indexed address undefined tokenId indexed uint256 undefined Errors ERC721IncorrectOwner error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner) Indicates an error related to the ownership over a particular token. Used in transfers. Parameters Name Type Description sender address Address whose tokens are being transferred. tokenId uint256 Identifier number of a token. owner address Address of the current owner of a token. ERC721InsufficientApproval error ERC721InsufficientApproval(address operator, uint256 tokenId) Indicates a failure with the operator \u2019s approval. Used in transfers. Parameters Name Type Description operator address Address that may be allowed to operate on tokens without being their owner. tokenId uint256 Identifier number of a token. ERC721InvalidApprover error ERC721InvalidApprover(address approver) Indicates a failure with the approver of a token to be approved. Used in approvals. Parameters Name Type Description approver address Address initiating an approval operation. ERC721InvalidOperator error ERC721InvalidOperator(address operator) Indicates a failure with the operator to be approved. Used in approvals. Parameters Name Type Description operator address Address that may be allowed to operate on tokens without being their owner. ERC721InvalidOwner error ERC721InvalidOwner(address owner) Indicates that an address can't be an owner. For example, address(0) is a forbidden owner in EIP-20. Used in balance queries. Parameters Name Type Description owner address Address of the current owner of a token. ERC721InvalidReceiver error ERC721InvalidReceiver(address receiver) Indicates a failure with the token receiver . Used in transfers. Parameters Name Type Description receiver address Address to which tokens are being transferred. ERC721InvalidSender error ERC721InvalidSender(address sender) Indicates a failure with the token sender . Used in transfers. Parameters Name Type Description sender address Address whose tokens are being transferred. ERC721NonexistentToken error ERC721NonexistentToken(uint256 tokenId) Indicates a tokenId whose owner is the zero address. Parameters Name Type Description tokenId uint256 Identifier number of a token. OwnableInvalidOwner error OwnableInvalidOwner(address owner) The owner is not a valid owner account. (eg. address(0) ) Parameters Name Type Description owner address undefined OwnableUnauthorizedAccount error OwnableUnauthorizedAccount(address account) The caller account is not authorized to perform an operation. Parameters Name Type Description account address undefined","title":"ERC721oc"},{"location":"reference/ERC721oc/#erc721oc","text":"0xstabby.eth ERC721oc ERC721 OnChainTraits implementation","title":"ERC721oc"},{"location":"reference/ERC721oc/#methods","text":"","title":"Methods"},{"location":"reference/ERC721oc/#_name","text":"function _name() external view returns (string)","title":"_name"},{"location":"reference/ERC721oc/#returns","text":"Name Type Description _0 string undefined","title":"Returns"},{"location":"reference/ERC721oc/#_symbol","text":"function _symbol() external view returns (string)","title":"_symbol"},{"location":"reference/ERC721oc/#returns_1","text":"Name Type Description _0 string undefined","title":"Returns"},{"location":"reference/ERC721oc/#approve","text":"function approve(address to, uint256 tokenId) external nonpayable See {IERC721-approve}.","title":"approve"},{"location":"reference/ERC721oc/#parameters","text":"Name Type Description to address undefined tokenId uint256 undefined","title":"Parameters"},{"location":"reference/ERC721oc/#balanceof","text":"function balanceOf(address owner) external view returns (uint256) See {IERC721-balanceOf}.","title":"balanceOf"},{"location":"reference/ERC721oc/#parameters_1","text":"Name Type Description owner address undefined","title":"Parameters"},{"location":"reference/ERC721oc/#returns_2","text":"Name Type Description _0 uint256 undefined","title":"Returns"},{"location":"reference/ERC721oc/#description","text":"function description() external view returns (string)","title":"description"},{"location":"reference/ERC721oc/#returns_3","text":"Name Type Description _0 string undefined","title":"Returns"},{"location":"reference/ERC721oc/#getapproved","text":"function getApproved(uint256 tokenId) external view returns (address) See {IERC721-getApproved}.","title":"getApproved"},{"location":"reference/ERC721oc/#parameters_2","text":"Name Type Description tokenId uint256 undefined","title":"Parameters"},{"location":"reference/ERC721oc/#returns_4","text":"Name Type Description _0 address undefined","title":"Returns"},{"location":"reference/ERC721oc/#getimage","text":"function getImage(uint256 id) external view returns (string) Get image Can be overridden","title":"getImage"},{"location":"reference/ERC721oc/#parameters_3","text":"Name Type Description id uint256 To get image for","title":"Parameters"},{"location":"reference/ERC721oc/#returns_5","text":"Name Type Description _0 string String of base64 encoded svg","title":"Returns"},{"location":"reference/ERC721oc/#getmetadata","text":"function getMetadata(uint256 id) external view returns (string) Get metadata for id Can be overridden","title":"getMetadata"},{"location":"reference/ERC721oc/#parameters_4","text":"Name Type Description id uint256 To grab metadata for","title":"Parameters"},{"location":"reference/ERC721oc/#returns_6","text":"Name Type Description _0 string String of base64 encoded metadata","title":"Returns"},{"location":"reference/ERC721oc/#gettraits","text":"function getTraits(uint256 id) external view returns (struct OnChainDataStructs.Trait[]) Get traits for id Can be overridden","title":"getTraits"},{"location":"reference/ERC721oc/#parameters_5","text":"Name Type Description id uint256 To grab traits for","title":"Parameters"},{"location":"reference/ERC721oc/#returns_7","text":"Name Type Description _0 OnChainDataStructs.Trait[] Array of Traits","title":"Returns"},{"location":"reference/ERC721oc/#isapprovedforall","text":"function isApprovedForAll(address owner, address operator) external view returns (bool) See {IERC721-isApprovedForAll}.","title":"isApprovedForAll"},{"location":"reference/ERC721oc/#parameters_6","text":"Name Type Description owner address undefined operator address undefined","title":"Parameters"},{"location":"reference/ERC721oc/#returns_8","text":"Name Type Description _0 bool undefined","title":"Returns"},{"location":"reference/ERC721oc/#name","text":"function name() external view returns (string) See {IERC721Metadata-name}.","title":"name"},{"location":"reference/ERC721oc/#returns_9","text":"Name Type Description _0 string undefined","title":"Returns"},{"location":"reference/ERC721oc/#owner","text":"function owner() external view returns (address) Returns the address of the current owner.","title":"owner"},{"location":"reference/ERC721oc/#returns_10","text":"Name Type Description _0 address undefined","title":"Returns"},{"location":"reference/ERC721oc/#ownerof","text":"function ownerOf(uint256 tokenId) external view returns (address) See {IERC721-ownerOf}.","title":"ownerOf"},{"location":"reference/ERC721oc/#parameters_7","text":"Name Type Description tokenId uint256 undefined","title":"Parameters"},{"location":"reference/ERC721oc/#returns_11","text":"Name Type Description _0 address undefined","title":"Returns"},{"location":"reference/ERC721oc/#renounceownership","text":"function renounceOwnership() external nonpayable Leaves the contract without owner. It will not be possible to call onlyOwner functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.","title":"renounceOwnership"},{"location":"reference/ERC721oc/#reveal","text":"function reveal(uint256 _seed) external payable Reveal function with seed","title":"reveal"},{"location":"reference/ERC721oc/#parameters_8","text":"Name Type Description _seed uint256 To initialize metadata with","title":"Parameters"},{"location":"reference/ERC721oc/#safetransferfrom","text":"function safeTransferFrom(address from, address to, uint256 tokenId) external nonpayable See {IERC721-safeTransferFrom}.","title":"safeTransferFrom"},{"location":"reference/ERC721oc/#parameters_9","text":"Name Type Description from address undefined to address undefined tokenId uint256 undefined","title":"Parameters"},{"location":"reference/ERC721oc/#safetransferfrom_1","text":"function safeTransferFrom(address from, address to, uint256 tokenId, bytes data) external nonpayable See {IERC721-safeTransferFrom}.","title":"safeTransferFrom"},{"location":"reference/ERC721oc/#parameters_10","text":"Name Type Description from address undefined to address undefined tokenId uint256 undefined data bytes undefined","title":"Parameters"},{"location":"reference/ERC721oc/#seed","text":"function seed() external view returns (uint256)","title":"seed"},{"location":"reference/ERC721oc/#returns_12","text":"Name Type Description _0 uint256 undefined","title":"Returns"},{"location":"reference/ERC721oc/#setapprovalforall","text":"function setApprovalForAll(address operator, bool approved) external nonpayable See {IERC721-setApprovalForAll}.","title":"setApprovalForAll"},{"location":"reference/ERC721oc/#parameters_11","text":"Name Type Description operator address undefined approved bool undefined","title":"Parameters"},{"location":"reference/ERC721oc/#settraits","text":"function setTraits(OnChainDataStructs.Trait[] traits) external payable","title":"setTraits"},{"location":"reference/ERC721oc/#parameters_12","text":"Name Type Description traits OnChainDataStructs.Trait[] undefined","title":"Parameters"},{"location":"reference/ERC721oc/#supportsinterface","text":"function supportsInterface(bytes4 interfaceId) external view returns (bool) See {IERC165-supportsInterface}.","title":"supportsInterface"},{"location":"reference/ERC721oc/#parameters_13","text":"Name Type Description interfaceId bytes4 undefined","title":"Parameters"},{"location":"reference/ERC721oc/#returns_13","text":"Name Type Description _0 bool undefined","title":"Returns"},{"location":"reference/ERC721oc/#symbol","text":"function symbol() external view returns (string) See {IERC721Metadata-symbol}.","title":"symbol"},{"location":"reference/ERC721oc/#returns_14","text":"Name Type Description _0 string undefined","title":"Returns"},{"location":"reference/ERC721oc/#tokenuri","text":"function tokenURI(uint256 id) external view returns (string) TokenURI returns base64URI metadata with a base64URI image","title":"tokenURI"},{"location":"reference/ERC721oc/#parameters_14","text":"Name Type Description id uint256 Of ERC721","title":"Parameters"},{"location":"reference/ERC721oc/#returns_15","text":"Name Type Description _0 string undefined","title":"Returns"},{"location":"reference/ERC721oc/#traittypecount","text":"function traitTypeCount() external view returns (uint256)","title":"traitTypeCount"},{"location":"reference/ERC721oc/#returns_16","text":"Name Type Description _0 uint256 undefined","title":"Returns"},{"location":"reference/ERC721oc/#traitvaluecount","text":"function traitValueCount() external view returns (uint256)","title":"traitValueCount"},{"location":"reference/ERC721oc/#returns_17","text":"Name Type Description _0 uint256 undefined","title":"Returns"},{"location":"reference/ERC721oc/#transferfrom","text":"function transferFrom(address from, address to, uint256 tokenId) external nonpayable See {IERC721-transferFrom}.","title":"transferFrom"},{"location":"reference/ERC721oc/#parameters_15","text":"Name Type Description from address undefined to address undefined tokenId uint256 undefined","title":"Parameters"},{"location":"reference/ERC721oc/#transferownership","text":"function transferOwnership(address newOwner) external nonpayable Transfers ownership of the contract to a new account ( newOwner ). Can only be called by the current owner.","title":"transferOwnership"},{"location":"reference/ERC721oc/#parameters_16","text":"Name Type Description newOwner address undefined","title":"Parameters"},{"location":"reference/ERC721oc/#events","text":"","title":"Events"},{"location":"reference/ERC721oc/#approval","text":"event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId) Emitted when owner enables approved to manage the tokenId token.","title":"Approval"},{"location":"reference/ERC721oc/#parameters_17","text":"Name Type Description owner indexed address undefined approved indexed address undefined tokenId indexed uint256 undefined","title":"Parameters"},{"location":"reference/ERC721oc/#approvalforall","text":"event ApprovalForAll(address indexed owner, address indexed operator, bool approved) Emitted when owner enables or disables ( approved ) operator to manage all of its assets.","title":"ApprovalForAll"},{"location":"reference/ERC721oc/#parameters_18","text":"Name Type Description owner indexed address undefined operator indexed address undefined approved bool undefined","title":"Parameters"},{"location":"reference/ERC721oc/#ownershiptransferred","text":"event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)","title":"OwnershipTransferred"},{"location":"reference/ERC721oc/#parameters_19","text":"Name Type Description previousOwner indexed address undefined newOwner indexed address undefined","title":"Parameters"},{"location":"reference/ERC721oc/#transfer","text":"event Transfer(address indexed from, address indexed to, uint256 indexed tokenId) Emitted when tokenId token is transferred from from to to .","title":"Transfer"},{"location":"reference/ERC721oc/#parameters_20","text":"Name Type Description from indexed address undefined to indexed address undefined tokenId indexed uint256 undefined","title":"Parameters"},{"location":"reference/ERC721oc/#errors","text":"","title":"Errors"},{"location":"reference/ERC721oc/#erc721incorrectowner","text":"error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner) Indicates an error related to the ownership over a particular token. Used in transfers.","title":"ERC721IncorrectOwner"},{"location":"reference/ERC721oc/#parameters_21","text":"Name Type Description sender address Address whose tokens are being transferred. tokenId uint256 Identifier number of a token. owner address Address of the current owner of a token.","title":"Parameters"},{"location":"reference/ERC721oc/#erc721insufficientapproval","text":"error ERC721InsufficientApproval(address operator, uint256 tokenId) Indicates a failure with the operator \u2019s approval. Used in transfers.","title":"ERC721InsufficientApproval"},{"location":"reference/ERC721oc/#parameters_22","text":"Name Type Description operator address Address that may be allowed to operate on tokens without being their owner. tokenId uint256 Identifier number of a token.","title":"Parameters"},{"location":"reference/ERC721oc/#erc721invalidapprover","text":"error ERC721InvalidApprover(address approver) Indicates a failure with the approver of a token to be approved. Used in approvals.","title":"ERC721InvalidApprover"},{"location":"reference/ERC721oc/#parameters_23","text":"Name Type Description approver address Address initiating an approval operation.","title":"Parameters"},{"location":"reference/ERC721oc/#erc721invalidoperator","text":"error ERC721InvalidOperator(address operator) Indicates a failure with the operator to be approved. Used in approvals.","title":"ERC721InvalidOperator"},{"location":"reference/ERC721oc/#parameters_24","text":"Name Type Description operator address Address that may be allowed to operate on tokens without being their owner.","title":"Parameters"},{"location":"reference/ERC721oc/#erc721invalidowner","text":"error ERC721InvalidOwner(address owner) Indicates that an address can't be an owner. For example, address(0) is a forbidden owner in EIP-20. Used in balance queries.","title":"ERC721InvalidOwner"},{"location":"reference/ERC721oc/#parameters_25","text":"Name Type Description owner address Address of the current owner of a token.","title":"Parameters"},{"location":"reference/ERC721oc/#erc721invalidreceiver","text":"error ERC721InvalidReceiver(address receiver) Indicates a failure with the token receiver . Used in transfers.","title":"ERC721InvalidReceiver"},{"location":"reference/ERC721oc/#parameters_26","text":"Name Type Description receiver address Address to which tokens are being transferred.","title":"Parameters"},{"location":"reference/ERC721oc/#erc721invalidsender","text":"error ERC721InvalidSender(address sender) Indicates a failure with the token sender . Used in transfers.","title":"ERC721InvalidSender"},{"location":"reference/ERC721oc/#parameters_27","text":"Name Type Description sender address Address whose tokens are being transferred.","title":"Parameters"},{"location":"reference/ERC721oc/#erc721nonexistenttoken","text":"error ERC721NonexistentToken(uint256 tokenId) Indicates a tokenId whose owner is the zero address.","title":"ERC721NonexistentToken"},{"location":"reference/ERC721oc/#parameters_28","text":"Name Type Description tokenId uint256 Identifier number of a token.","title":"Parameters"},{"location":"reference/ERC721oc/#ownableinvalidowner","text":"error OwnableInvalidOwner(address owner) The owner is not a valid owner account. (eg. address(0) )","title":"OwnableInvalidOwner"},{"location":"reference/ERC721oc/#parameters_29","text":"Name Type Description owner address undefined","title":"Parameters"},{"location":"reference/ERC721oc/#ownableunauthorizedaccount","text":"error OwnableUnauthorizedAccount(address account) The caller account is not authorized to perform an operation.","title":"OwnableUnauthorizedAccount"},{"location":"reference/ERC721oc/#parameters_30","text":"Name Type Description account address undefined","title":"Parameters"},{"location":"test/MinimalTest/","text":"MinimalTest 0xstabby.eth MinimalTest Test for testing OnChainTraits without ERC721 overhead Methods _name function _name() external view returns (string) Returns Name Type Description _0 string undefined _symbol function _symbol() external view returns (string) Returns Name Type Description _0 string undefined description function description() external view returns (string) Returns Name Type Description _0 string undefined getImage function getImage(uint256 id) external view returns (string) Get image Can be overridden Parameters Name Type Description id uint256 To get image for Returns Name Type Description _0 string String of base64 encoded svg getMetadata function getMetadata(uint256 id) external view returns (string) Get metadata for id Can be overridden Parameters Name Type Description id uint256 To grab metadata for Returns Name Type Description _0 string String of base64 encoded metadata getTraits function getTraits(uint256 id) external view returns (struct OnChainDataStructs.Trait[]) Get traits for id Can be overridden Parameters Name Type Description id uint256 To grab traits for Returns Name Type Description _0 OnChainDataStructs.Trait[] Array of Traits seed function seed() external view returns (uint256) Returns Name Type Description _0 uint256 undefined tokenURI function tokenURI(uint256 id) external view returns (string) Parameters Name Type Description id uint256 undefined Returns Name Type Description _0 string undefined traitTypeCount function traitTypeCount() external view returns (uint256) Returns Name Type Description _0 uint256 undefined traitValueCount function traitValueCount() external view returns (uint256) Returns Name Type Description _0 uint256 undefined","title":"MinimalTest"},{"location":"test/MinimalTest/#minimaltest","text":"0xstabby.eth MinimalTest Test for testing OnChainTraits without ERC721 overhead","title":"MinimalTest"},{"location":"test/MinimalTest/#methods","text":"","title":"Methods"},{"location":"test/MinimalTest/#_name","text":"function _name() external view returns (string)","title":"_name"},{"location":"test/MinimalTest/#returns","text":"Name Type Description _0 string undefined","title":"Returns"},{"location":"test/MinimalTest/#_symbol","text":"function _symbol() external view returns (string)","title":"_symbol"},{"location":"test/MinimalTest/#returns_1","text":"Name Type Description _0 string undefined","title":"Returns"},{"location":"test/MinimalTest/#description","text":"function description() external view returns (string)","title":"description"},{"location":"test/MinimalTest/#returns_2","text":"Name Type Description _0 string undefined","title":"Returns"},{"location":"test/MinimalTest/#getimage","text":"function getImage(uint256 id) external view returns (string) Get image Can be overridden","title":"getImage"},{"location":"test/MinimalTest/#parameters","text":"Name Type Description id uint256 To get image for","title":"Parameters"},{"location":"test/MinimalTest/#returns_3","text":"Name Type Description _0 string String of base64 encoded svg","title":"Returns"},{"location":"test/MinimalTest/#getmetadata","text":"function getMetadata(uint256 id) external view returns (string) Get metadata for id Can be overridden","title":"getMetadata"},{"location":"test/MinimalTest/#parameters_1","text":"Name Type Description id uint256 To grab metadata for","title":"Parameters"},{"location":"test/MinimalTest/#returns_4","text":"Name Type Description _0 string String of base64 encoded metadata","title":"Returns"},{"location":"test/MinimalTest/#gettraits","text":"function getTraits(uint256 id) external view returns (struct OnChainDataStructs.Trait[]) Get traits for id Can be overridden","title":"getTraits"},{"location":"test/MinimalTest/#parameters_2","text":"Name Type Description id uint256 To grab traits for","title":"Parameters"},{"location":"test/MinimalTest/#returns_5","text":"Name Type Description _0 OnChainDataStructs.Trait[] Array of Traits","title":"Returns"},{"location":"test/MinimalTest/#seed","text":"function seed() external view returns (uint256)","title":"seed"},{"location":"test/MinimalTest/#returns_6","text":"Name Type Description _0 uint256 undefined","title":"Returns"},{"location":"test/MinimalTest/#tokenuri","text":"function tokenURI(uint256 id) external view returns (string)","title":"tokenURI"},{"location":"test/MinimalTest/#parameters_3","text":"Name Type Description id uint256 undefined","title":"Parameters"},{"location":"test/MinimalTest/#returns_7","text":"Name Type Description _0 string undefined","title":"Returns"},{"location":"test/MinimalTest/#traittypecount","text":"function traitTypeCount() external view returns (uint256)","title":"traitTypeCount"},{"location":"test/MinimalTest/#returns_8","text":"Name Type Description _0 uint256 undefined","title":"Returns"},{"location":"test/MinimalTest/#traitvaluecount","text":"function traitValueCount() external view returns (uint256)","title":"traitValueCount"},{"location":"test/MinimalTest/#returns_9","text":"Name Type Description _0 uint256 undefined","title":"Returns"},{"location":"test/RandomTest/","text":"RandomTest 0xstabby.eth RandomTest Test for random lib","title":"RandomTest"},{"location":"test/RandomTest/#randomtest","text":"0xstabby.eth RandomTest Test for random lib","title":"RandomTest"}]}